// Code generated by MockGen. DO NOT EDIT.
// Source: ./external.go
//
// Generated by this command:
//
//	mockgen -destination ./mock_external.go -package rbft -source ./external.go -typed
//

// Package rbft is a generated GoMock package.
package rbft

import (
	context "context"
	reflect "reflect"

	consensus "github.com/axiomesh/axiom-bft/common/consensus"
	types "github.com/axiomesh/axiom-bft/types"
	types0 "github.com/axiomesh/axiom-kit/types"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockStorage) ISGOMOCK() struct{} {
	return struct{}{}
}

// DelState mocks base method.
func (m *MockStorage) DelState(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelState", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelState indicates an expected call of DelState.
func (mr *MockStorageMockRecorder) DelState(key any) *MockStorageDelStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelState", reflect.TypeOf((*MockStorage)(nil).DelState), key)
	return &MockStorageDelStateCall{Call: call}
}

// MockStorageDelStateCall wrap *gomock.Call
type MockStorageDelStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageDelStateCall) Return(arg0 error) *MockStorageDelStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageDelStateCall) Do(f func(string) error) *MockStorageDelStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageDelStateCall) DoAndReturn(f func(string) error) *MockStorageDelStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadState mocks base method.
func (m *MockStorage) ReadState(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadState", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadState indicates an expected call of ReadState.
func (mr *MockStorageMockRecorder) ReadState(key any) *MockStorageReadStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadState", reflect.TypeOf((*MockStorage)(nil).ReadState), key)
	return &MockStorageReadStateCall{Call: call}
}

// MockStorageReadStateCall wrap *gomock.Call
type MockStorageReadStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageReadStateCall) Return(arg0 []byte, arg1 error) *MockStorageReadStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageReadStateCall) Do(f func(string) ([]byte, error)) *MockStorageReadStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageReadStateCall) DoAndReturn(f func(string) ([]byte, error)) *MockStorageReadStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadStateSet mocks base method.
func (m *MockStorage) ReadStateSet(key string) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStateSet", key)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStateSet indicates an expected call of ReadStateSet.
func (mr *MockStorageMockRecorder) ReadStateSet(key any) *MockStorageReadStateSetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStateSet", reflect.TypeOf((*MockStorage)(nil).ReadStateSet), key)
	return &MockStorageReadStateSetCall{Call: call}
}

// MockStorageReadStateSetCall wrap *gomock.Call
type MockStorageReadStateSetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageReadStateSetCall) Return(arg0 map[string][]byte, arg1 error) *MockStorageReadStateSetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageReadStateSetCall) Do(f func(string) (map[string][]byte, error)) *MockStorageReadStateSetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageReadStateSetCall) DoAndReturn(f func(string) (map[string][]byte, error)) *MockStorageReadStateSetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StoreState mocks base method.
func (m *MockStorage) StoreState(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreState", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreState indicates an expected call of StoreState.
func (mr *MockStorageMockRecorder) StoreState(key, value any) *MockStorageStoreStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreState", reflect.TypeOf((*MockStorage)(nil).StoreState), key, value)
	return &MockStorageStoreStateCall{Call: call}
}

// MockStorageStoreStateCall wrap *gomock.Call
type MockStorageStoreStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageStoreStateCall) Return(arg0 error) *MockStorageStoreStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageStoreStateCall) Do(f func(string, []byte) error) *MockStorageStoreStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageStoreStateCall) DoAndReturn(f func(string, []byte) error) *MockStorageStoreStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNetwork is a mock of Network interface.
type MockNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkMockRecorder
}

// MockNetworkMockRecorder is the mock recorder for MockNetwork.
type MockNetworkMockRecorder struct {
	mock *MockNetwork
}

// NewMockNetwork creates a new mock instance.
func NewMockNetwork(ctrl *gomock.Controller) *MockNetwork {
	mock := &MockNetwork{ctrl: ctrl}
	mock.recorder = &MockNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetwork) EXPECT() *MockNetworkMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNetwork) ISGOMOCK() struct{} {
	return struct{}{}
}

// Broadcast mocks base method.
func (m *MockNetwork) Broadcast(ctx context.Context, msg *consensus.ConsensusMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockNetworkMockRecorder) Broadcast(ctx, msg any) *MockNetworkBroadcastCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockNetwork)(nil).Broadcast), ctx, msg)
	return &MockNetworkBroadcastCall{Call: call}
}

// MockNetworkBroadcastCall wrap *gomock.Call
type MockNetworkBroadcastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkBroadcastCall) Return(arg0 error) *MockNetworkBroadcastCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkBroadcastCall) Do(f func(context.Context, *consensus.ConsensusMessage) error) *MockNetworkBroadcastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkBroadcastCall) DoAndReturn(f func(context.Context, *consensus.ConsensusMessage) error) *MockNetworkBroadcastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unicast mocks base method.
func (m *MockNetwork) Unicast(ctx context.Context, msg *consensus.ConsensusMessage, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unicast", ctx, msg, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unicast indicates an expected call of Unicast.
func (mr *MockNetworkMockRecorder) Unicast(ctx, msg, to any) *MockNetworkUnicastCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unicast", reflect.TypeOf((*MockNetwork)(nil).Unicast), ctx, msg, to)
	return &MockNetworkUnicastCall{Call: call}
}

// MockNetworkUnicastCall wrap *gomock.Call
type MockNetworkUnicastCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkUnicastCall) Return(arg0 error) *MockNetworkUnicastCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkUnicastCall) Do(f func(context.Context, *consensus.ConsensusMessage, string) error) *MockNetworkUnicastCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkUnicastCall) DoAndReturn(f func(context.Context, *consensus.ConsensusMessage, string) error) *MockNetworkUnicastCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCrypto is a mock of Crypto interface.
type MockCrypto struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoMockRecorder
}

// MockCryptoMockRecorder is the mock recorder for MockCrypto.
type MockCryptoMockRecorder struct {
	mock *MockCrypto
}

// NewMockCrypto creates a new mock instance.
func NewMockCrypto(ctrl *gomock.Controller) *MockCrypto {
	mock := &MockCrypto{ctrl: ctrl}
	mock.recorder = &MockCryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrypto) EXPECT() *MockCryptoMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockCrypto) ISGOMOCK() struct{} {
	return struct{}{}
}

// Sign mocks base method.
func (m *MockCrypto) Sign(msg []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockCryptoMockRecorder) Sign(msg any) *MockCryptoSignCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockCrypto)(nil).Sign), msg)
	return &MockCryptoSignCall{Call: call}
}

// MockCryptoSignCall wrap *gomock.Call
type MockCryptoSignCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCryptoSignCall) Return(arg0 []byte, arg1 error) *MockCryptoSignCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCryptoSignCall) Do(f func([]byte) ([]byte, error)) *MockCryptoSignCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCryptoSignCall) DoAndReturn(f func([]byte) ([]byte, error)) *MockCryptoSignCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Verify mocks base method.
func (m *MockCrypto) Verify(nodeID uint64, signature, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", nodeID, signature, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockCryptoMockRecorder) Verify(nodeID, signature, msg any) *MockCryptoVerifyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockCrypto)(nil).Verify), nodeID, signature, msg)
	return &MockCryptoVerifyCall{Call: call}
}

// MockCryptoVerifyCall wrap *gomock.Call
type MockCryptoVerifyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCryptoVerifyCall) Return(arg0 error) *MockCryptoVerifyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCryptoVerifyCall) Do(f func(uint64, []byte, []byte) error) *MockCryptoVerifyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCryptoVerifyCall) DoAndReturn(f func(uint64, []byte, []byte) error) *MockCryptoVerifyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockServiceOutbound is a mock of ServiceOutbound interface.
type MockServiceOutbound[T any, Constraint types0.TXConstraint[T]] struct {
	ctrl     *gomock.Controller
	recorder *MockServiceOutboundMockRecorder[T, Constraint]
}

// MockServiceOutboundMockRecorder is the mock recorder for MockServiceOutbound.
type MockServiceOutboundMockRecorder[T any, Constraint types0.TXConstraint[T]] struct {
	mock *MockServiceOutbound[T, Constraint]
}

// NewMockServiceOutbound creates a new mock instance.
func NewMockServiceOutbound[T any, Constraint types0.TXConstraint[T]](ctrl *gomock.Controller) *MockServiceOutbound[T, Constraint] {
	mock := &MockServiceOutbound[T, Constraint]{ctrl: ctrl}
	mock.recorder = &MockServiceOutboundMockRecorder[T, Constraint]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceOutbound[T, Constraint]) EXPECT() *MockServiceOutboundMockRecorder[T, Constraint] {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockServiceOutbound[T, Constraint]) ISGOMOCK() struct{} {
	return struct{}{}
}

// Execute mocks base method.
func (m *MockServiceOutbound[T, Constraint]) Execute(txs []*T, localList []bool, seqNo uint64, timestamp int64, proposerNodeID uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", txs, localList, seqNo, timestamp, proposerNodeID)
}

// Execute indicates an expected call of Execute.
func (mr *MockServiceOutboundMockRecorder[T, Constraint]) Execute(txs, localList, seqNo, timestamp, proposerNodeID any) *MockServiceOutboundExecuteCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockServiceOutbound[T, Constraint])(nil).Execute), txs, localList, seqNo, timestamp, proposerNodeID)
	return &MockServiceOutboundExecuteCall[T, Constraint]{Call: call}
}

// MockServiceOutboundExecuteCall wrap *gomock.Call
type MockServiceOutboundExecuteCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceOutboundExecuteCall[T, Constraint]) Return() *MockServiceOutboundExecuteCall[T, Constraint] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceOutboundExecuteCall[T, Constraint]) Do(f func([]*T, []bool, uint64, int64, uint64)) *MockServiceOutboundExecuteCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceOutboundExecuteCall[T, Constraint]) DoAndReturn(f func([]*T, []bool, uint64, int64, uint64)) *MockServiceOutboundExecuteCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendFilterEvent mocks base method.
func (m *MockServiceOutbound[T, Constraint]) SendFilterEvent(informType types.InformType, message ...any) {
	m.ctrl.T.Helper()
	varargs := []any{informType}
	for _, a := range message {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SendFilterEvent", varargs...)
}

// SendFilterEvent indicates an expected call of SendFilterEvent.
func (mr *MockServiceOutboundMockRecorder[T, Constraint]) SendFilterEvent(informType any, message ...any) *MockServiceOutboundSendFilterEventCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{informType}, message...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFilterEvent", reflect.TypeOf((*MockServiceOutbound[T, Constraint])(nil).SendFilterEvent), varargs...)
	return &MockServiceOutboundSendFilterEventCall[T, Constraint]{Call: call}
}

// MockServiceOutboundSendFilterEventCall wrap *gomock.Call
type MockServiceOutboundSendFilterEventCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceOutboundSendFilterEventCall[T, Constraint]) Return() *MockServiceOutboundSendFilterEventCall[T, Constraint] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceOutboundSendFilterEventCall[T, Constraint]) Do(f func(types.InformType, ...any)) *MockServiceOutboundSendFilterEventCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceOutboundSendFilterEventCall[T, Constraint]) DoAndReturn(f func(types.InformType, ...any)) *MockServiceOutboundSendFilterEventCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StateUpdate mocks base method.
func (m *MockServiceOutbound[T, Constraint]) StateUpdate(localLowWatermark, seqNo uint64, digest string, checkpoints []*consensus.SignedCheckpoint, epochChanges ...*consensus.EpochChange) {
	m.ctrl.T.Helper()
	varargs := []any{localLowWatermark, seqNo, digest, checkpoints}
	for _, a := range epochChanges {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "StateUpdate", varargs...)
}

// StateUpdate indicates an expected call of StateUpdate.
func (mr *MockServiceOutboundMockRecorder[T, Constraint]) StateUpdate(localLowWatermark, seqNo, digest, checkpoints any, epochChanges ...any) *MockServiceOutboundStateUpdateCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{localLowWatermark, seqNo, digest, checkpoints}, epochChanges...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateUpdate", reflect.TypeOf((*MockServiceOutbound[T, Constraint])(nil).StateUpdate), varargs...)
	return &MockServiceOutboundStateUpdateCall[T, Constraint]{Call: call}
}

// MockServiceOutboundStateUpdateCall wrap *gomock.Call
type MockServiceOutboundStateUpdateCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceOutboundStateUpdateCall[T, Constraint]) Return() *MockServiceOutboundStateUpdateCall[T, Constraint] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceOutboundStateUpdateCall[T, Constraint]) Do(f func(uint64, uint64, string, []*consensus.SignedCheckpoint, ...*consensus.EpochChange)) *MockServiceOutboundStateUpdateCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceOutboundStateUpdateCall[T, Constraint]) DoAndReturn(f func(uint64, uint64, string, []*consensus.SignedCheckpoint, ...*consensus.EpochChange)) *MockServiceOutboundStateUpdateCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockEpochService is a mock of EpochService interface.
type MockEpochService struct {
	ctrl     *gomock.Controller
	recorder *MockEpochServiceMockRecorder
}

// MockEpochServiceMockRecorder is the mock recorder for MockEpochService.
type MockEpochServiceMockRecorder struct {
	mock *MockEpochService
}

// NewMockEpochService creates a new mock instance.
func NewMockEpochService(ctrl *gomock.Controller) *MockEpochService {
	mock := &MockEpochService{ctrl: ctrl}
	mock.recorder = &MockEpochServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEpochService) EXPECT() *MockEpochServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockEpochService) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetCurrentEpochInfo mocks base method.
func (m *MockEpochService) GetCurrentEpochInfo() (*types0.EpochInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentEpochInfo")
	ret0, _ := ret[0].(*types0.EpochInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentEpochInfo indicates an expected call of GetCurrentEpochInfo.
func (mr *MockEpochServiceMockRecorder) GetCurrentEpochInfo() *MockEpochServiceGetCurrentEpochInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentEpochInfo", reflect.TypeOf((*MockEpochService)(nil).GetCurrentEpochInfo))
	return &MockEpochServiceGetCurrentEpochInfoCall{Call: call}
}

// MockEpochServiceGetCurrentEpochInfoCall wrap *gomock.Call
type MockEpochServiceGetCurrentEpochInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEpochServiceGetCurrentEpochInfoCall) Return(arg0 *types0.EpochInfo, arg1 error) *MockEpochServiceGetCurrentEpochInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEpochServiceGetCurrentEpochInfoCall) Do(f func() (*types0.EpochInfo, error)) *MockEpochServiceGetCurrentEpochInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEpochServiceGetCurrentEpochInfoCall) DoAndReturn(f func() (*types0.EpochInfo, error)) *MockEpochServiceGetCurrentEpochInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEpochInfo mocks base method.
func (m *MockEpochService) GetEpochInfo(epoch uint64) (*types0.EpochInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpochInfo", epoch)
	ret0, _ := ret[0].(*types0.EpochInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpochInfo indicates an expected call of GetEpochInfo.
func (mr *MockEpochServiceMockRecorder) GetEpochInfo(epoch any) *MockEpochServiceGetEpochInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpochInfo", reflect.TypeOf((*MockEpochService)(nil).GetEpochInfo), epoch)
	return &MockEpochServiceGetEpochInfoCall{Call: call}
}

// MockEpochServiceGetEpochInfoCall wrap *gomock.Call
type MockEpochServiceGetEpochInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEpochServiceGetEpochInfoCall) Return(arg0 *types0.EpochInfo, arg1 error) *MockEpochServiceGetEpochInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEpochServiceGetEpochInfoCall) Do(f func(uint64) (*types0.EpochInfo, error)) *MockEpochServiceGetEpochInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEpochServiceGetEpochInfoCall) DoAndReturn(f func(uint64) (*types0.EpochInfo, error)) *MockEpochServiceGetEpochInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadEpochState mocks base method.
func (m *MockEpochService) ReadEpochState(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEpochState", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEpochState indicates an expected call of ReadEpochState.
func (mr *MockEpochServiceMockRecorder) ReadEpochState(key any) *MockEpochServiceReadEpochStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEpochState", reflect.TypeOf((*MockEpochService)(nil).ReadEpochState), key)
	return &MockEpochServiceReadEpochStateCall{Call: call}
}

// MockEpochServiceReadEpochStateCall wrap *gomock.Call
type MockEpochServiceReadEpochStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEpochServiceReadEpochStateCall) Return(arg0 []byte, arg1 error) *MockEpochServiceReadEpochStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEpochServiceReadEpochStateCall) Do(f func(string) ([]byte, error)) *MockEpochServiceReadEpochStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEpochServiceReadEpochStateCall) DoAndReturn(f func(string) ([]byte, error)) *MockEpochServiceReadEpochStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StoreEpochState mocks base method.
func (m *MockEpochService) StoreEpochState(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreEpochState", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreEpochState indicates an expected call of StoreEpochState.
func (mr *MockEpochServiceMockRecorder) StoreEpochState(key, value any) *MockEpochServiceStoreEpochStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEpochState", reflect.TypeOf((*MockEpochService)(nil).StoreEpochState), key, value)
	return &MockEpochServiceStoreEpochStateCall{Call: call}
}

// MockEpochServiceStoreEpochStateCall wrap *gomock.Call
type MockEpochServiceStoreEpochStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEpochServiceStoreEpochStateCall) Return(arg0 error) *MockEpochServiceStoreEpochStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEpochServiceStoreEpochStateCall) Do(f func(string, []byte) error) *MockEpochServiceStoreEpochStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEpochServiceStoreEpochStateCall) DoAndReturn(f func(string, []byte) error) *MockEpochServiceStoreEpochStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNodeService is a mock of NodeService interface.
type MockNodeService struct {
	ctrl     *gomock.Controller
	recorder *MockNodeServiceMockRecorder
}

// MockNodeServiceMockRecorder is the mock recorder for MockNodeService.
type MockNodeServiceMockRecorder struct {
	mock *MockNodeService
}

// NewMockNodeService creates a new mock instance.
func NewMockNodeService(ctrl *gomock.Controller) *MockNodeService {
	mock := &MockNodeService{ctrl: ctrl}
	mock.recorder = &MockNodeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeService) EXPECT() *MockNodeServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockNodeService) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetNodeIDByP2PID mocks base method.
func (m *MockNodeService) GetNodeIDByP2PID(p2pID string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeIDByP2PID", p2pID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeIDByP2PID indicates an expected call of GetNodeIDByP2PID.
func (mr *MockNodeServiceMockRecorder) GetNodeIDByP2PID(p2pID any) *MockNodeServiceGetNodeIDByP2PIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeIDByP2PID", reflect.TypeOf((*MockNodeService)(nil).GetNodeIDByP2PID), p2pID)
	return &MockNodeServiceGetNodeIDByP2PIDCall{Call: call}
}

// MockNodeServiceGetNodeIDByP2PIDCall wrap *gomock.Call
type MockNodeServiceGetNodeIDByP2PIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeServiceGetNodeIDByP2PIDCall) Return(arg0 uint64, arg1 error) *MockNodeServiceGetNodeIDByP2PIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeServiceGetNodeIDByP2PIDCall) Do(f func(string) (uint64, error)) *MockNodeServiceGetNodeIDByP2PIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeServiceGetNodeIDByP2PIDCall) DoAndReturn(f func(string) (uint64, error)) *MockNodeServiceGetNodeIDByP2PIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNodeInfo mocks base method.
func (m *MockNodeService) GetNodeInfo(nodeID uint64) (*NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeInfo", nodeID)
	ret0, _ := ret[0].(*NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeInfo indicates an expected call of GetNodeInfo.
func (mr *MockNodeServiceMockRecorder) GetNodeInfo(nodeID any) *MockNodeServiceGetNodeInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeInfo", reflect.TypeOf((*MockNodeService)(nil).GetNodeInfo), nodeID)
	return &MockNodeServiceGetNodeInfoCall{Call: call}
}

// MockNodeServiceGetNodeInfoCall wrap *gomock.Call
type MockNodeServiceGetNodeInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeServiceGetNodeInfoCall) Return(arg0 *NodeInfo, arg1 error) *MockNodeServiceGetNodeInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeServiceGetNodeInfoCall) Do(f func(uint64) (*NodeInfo, error)) *MockNodeServiceGetNodeInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeServiceGetNodeInfoCall) DoAndReturn(f func(uint64) (*NodeInfo, error)) *MockNodeServiceGetNodeInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetValidatorSet mocks base method.
func (m *MockNodeService) GetValidatorSet() (map[uint64]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorSet")
	ret0, _ := ret[0].(map[uint64]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorSet indicates an expected call of GetValidatorSet.
func (mr *MockNodeServiceMockRecorder) GetValidatorSet() *MockNodeServiceGetValidatorSetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorSet", reflect.TypeOf((*MockNodeService)(nil).GetValidatorSet))
	return &MockNodeServiceGetValidatorSetCall{Call: call}
}

// MockNodeServiceGetValidatorSetCall wrap *gomock.Call
type MockNodeServiceGetValidatorSetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeServiceGetValidatorSetCall) Return(arg0 map[uint64]int64, arg1 error) *MockNodeServiceGetValidatorSetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeServiceGetValidatorSetCall) Do(f func() (map[uint64]int64, error)) *MockNodeServiceGetValidatorSetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeServiceGetValidatorSetCall) DoAndReturn(f func() (map[uint64]int64, error)) *MockNodeServiceGetValidatorSetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLedger is a mock of Ledger interface.
type MockLedger struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerMockRecorder
}

// MockLedgerMockRecorder is the mock recorder for MockLedger.
type MockLedgerMockRecorder struct {
	mock *MockLedger
}

// NewMockLedger creates a new mock instance.
func NewMockLedger(ctrl *gomock.Controller) *MockLedger {
	mock := &MockLedger{ctrl: ctrl}
	mock.recorder = &MockLedgerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedger) EXPECT() *MockLedgerMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockLedger) ISGOMOCK() struct{} {
	return struct{}{}
}

// GetBlockMeta mocks base method.
func (m *MockLedger) GetBlockMeta(num uint64) (*types.BlockMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockMeta", num)
	ret0, _ := ret[0].(*types.BlockMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockMeta indicates an expected call of GetBlockMeta.
func (mr *MockLedgerMockRecorder) GetBlockMeta(num any) *MockLedgerGetBlockMetaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockMeta", reflect.TypeOf((*MockLedger)(nil).GetBlockMeta), num)
	return &MockLedgerGetBlockMetaCall{Call: call}
}

// MockLedgerGetBlockMetaCall wrap *gomock.Call
type MockLedgerGetBlockMetaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLedgerGetBlockMetaCall) Return(arg0 *types.BlockMeta, arg1 error) *MockLedgerGetBlockMetaCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLedgerGetBlockMetaCall) Do(f func(uint64) (*types.BlockMeta, error)) *MockLedgerGetBlockMetaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLedgerGetBlockMetaCall) DoAndReturn(f func(uint64) (*types.BlockMeta, error)) *MockLedgerGetBlockMetaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockExternalStack is a mock of ExternalStack interface.
type MockExternalStack[T any, Constraint types0.TXConstraint[T]] struct {
	ctrl     *gomock.Controller
	recorder *MockExternalStackMockRecorder[T, Constraint]
}

// MockExternalStackMockRecorder is the mock recorder for MockExternalStack.
type MockExternalStackMockRecorder[T any, Constraint types0.TXConstraint[T]] struct {
	mock *MockExternalStack[T, Constraint]
}

// NewMockExternalStack creates a new mock instance.
func NewMockExternalStack[T any, Constraint types0.TXConstraint[T]](ctrl *gomock.Controller) *MockExternalStack[T, Constraint] {
	mock := &MockExternalStack[T, Constraint]{ctrl: ctrl}
	mock.recorder = &MockExternalStackMockRecorder[T, Constraint]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalStack[T, Constraint]) EXPECT() *MockExternalStackMockRecorder[T, Constraint] {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockExternalStack[T, Constraint]) ISGOMOCK() struct{} {
	return struct{}{}
}

// Broadcast mocks base method.
func (m *MockExternalStack[T, Constraint]) Broadcast(ctx context.Context, msg *consensus.ConsensusMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockExternalStackMockRecorder[T, Constraint]) Broadcast(ctx, msg any) *MockExternalStackBroadcastCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).Broadcast), ctx, msg)
	return &MockExternalStackBroadcastCall[T, Constraint]{Call: call}
}

// MockExternalStackBroadcastCall wrap *gomock.Call
type MockExternalStackBroadcastCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackBroadcastCall[T, Constraint]) Return(arg0 error) *MockExternalStackBroadcastCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackBroadcastCall[T, Constraint]) Do(f func(context.Context, *consensus.ConsensusMessage) error) *MockExternalStackBroadcastCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackBroadcastCall[T, Constraint]) DoAndReturn(f func(context.Context, *consensus.ConsensusMessage) error) *MockExternalStackBroadcastCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DelState mocks base method.
func (m *MockExternalStack[T, Constraint]) DelState(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelState", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelState indicates an expected call of DelState.
func (mr *MockExternalStackMockRecorder[T, Constraint]) DelState(key any) *MockExternalStackDelStateCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelState", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).DelState), key)
	return &MockExternalStackDelStateCall[T, Constraint]{Call: call}
}

// MockExternalStackDelStateCall wrap *gomock.Call
type MockExternalStackDelStateCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackDelStateCall[T, Constraint]) Return(arg0 error) *MockExternalStackDelStateCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackDelStateCall[T, Constraint]) Do(f func(string) error) *MockExternalStackDelStateCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackDelStateCall[T, Constraint]) DoAndReturn(f func(string) error) *MockExternalStackDelStateCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Execute mocks base method.
func (m *MockExternalStack[T, Constraint]) Execute(txs []*T, localList []bool, seqNo uint64, timestamp int64, proposerNodeID uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", txs, localList, seqNo, timestamp, proposerNodeID)
}

// Execute indicates an expected call of Execute.
func (mr *MockExternalStackMockRecorder[T, Constraint]) Execute(txs, localList, seqNo, timestamp, proposerNodeID any) *MockExternalStackExecuteCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).Execute), txs, localList, seqNo, timestamp, proposerNodeID)
	return &MockExternalStackExecuteCall[T, Constraint]{Call: call}
}

// MockExternalStackExecuteCall wrap *gomock.Call
type MockExternalStackExecuteCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackExecuteCall[T, Constraint]) Return() *MockExternalStackExecuteCall[T, Constraint] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackExecuteCall[T, Constraint]) Do(f func([]*T, []bool, uint64, int64, uint64)) *MockExternalStackExecuteCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackExecuteCall[T, Constraint]) DoAndReturn(f func([]*T, []bool, uint64, int64, uint64)) *MockExternalStackExecuteCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBlockMeta mocks base method.
func (m *MockExternalStack[T, Constraint]) GetBlockMeta(num uint64) (*types.BlockMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockMeta", num)
	ret0, _ := ret[0].(*types.BlockMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockMeta indicates an expected call of GetBlockMeta.
func (mr *MockExternalStackMockRecorder[T, Constraint]) GetBlockMeta(num any) *MockExternalStackGetBlockMetaCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockMeta", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).GetBlockMeta), num)
	return &MockExternalStackGetBlockMetaCall[T, Constraint]{Call: call}
}

// MockExternalStackGetBlockMetaCall wrap *gomock.Call
type MockExternalStackGetBlockMetaCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackGetBlockMetaCall[T, Constraint]) Return(arg0 *types.BlockMeta, arg1 error) *MockExternalStackGetBlockMetaCall[T, Constraint] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackGetBlockMetaCall[T, Constraint]) Do(f func(uint64) (*types.BlockMeta, error)) *MockExternalStackGetBlockMetaCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackGetBlockMetaCall[T, Constraint]) DoAndReturn(f func(uint64) (*types.BlockMeta, error)) *MockExternalStackGetBlockMetaCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCurrentEpochInfo mocks base method.
func (m *MockExternalStack[T, Constraint]) GetCurrentEpochInfo() (*types0.EpochInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentEpochInfo")
	ret0, _ := ret[0].(*types0.EpochInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentEpochInfo indicates an expected call of GetCurrentEpochInfo.
func (mr *MockExternalStackMockRecorder[T, Constraint]) GetCurrentEpochInfo() *MockExternalStackGetCurrentEpochInfoCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentEpochInfo", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).GetCurrentEpochInfo))
	return &MockExternalStackGetCurrentEpochInfoCall[T, Constraint]{Call: call}
}

// MockExternalStackGetCurrentEpochInfoCall wrap *gomock.Call
type MockExternalStackGetCurrentEpochInfoCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackGetCurrentEpochInfoCall[T, Constraint]) Return(arg0 *types0.EpochInfo, arg1 error) *MockExternalStackGetCurrentEpochInfoCall[T, Constraint] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackGetCurrentEpochInfoCall[T, Constraint]) Do(f func() (*types0.EpochInfo, error)) *MockExternalStackGetCurrentEpochInfoCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackGetCurrentEpochInfoCall[T, Constraint]) DoAndReturn(f func() (*types0.EpochInfo, error)) *MockExternalStackGetCurrentEpochInfoCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEpochInfo mocks base method.
func (m *MockExternalStack[T, Constraint]) GetEpochInfo(epoch uint64) (*types0.EpochInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpochInfo", epoch)
	ret0, _ := ret[0].(*types0.EpochInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpochInfo indicates an expected call of GetEpochInfo.
func (mr *MockExternalStackMockRecorder[T, Constraint]) GetEpochInfo(epoch any) *MockExternalStackGetEpochInfoCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpochInfo", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).GetEpochInfo), epoch)
	return &MockExternalStackGetEpochInfoCall[T, Constraint]{Call: call}
}

// MockExternalStackGetEpochInfoCall wrap *gomock.Call
type MockExternalStackGetEpochInfoCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackGetEpochInfoCall[T, Constraint]) Return(arg0 *types0.EpochInfo, arg1 error) *MockExternalStackGetEpochInfoCall[T, Constraint] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackGetEpochInfoCall[T, Constraint]) Do(f func(uint64) (*types0.EpochInfo, error)) *MockExternalStackGetEpochInfoCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackGetEpochInfoCall[T, Constraint]) DoAndReturn(f func(uint64) (*types0.EpochInfo, error)) *MockExternalStackGetEpochInfoCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNodeIDByP2PID mocks base method.
func (m *MockExternalStack[T, Constraint]) GetNodeIDByP2PID(p2pID string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeIDByP2PID", p2pID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeIDByP2PID indicates an expected call of GetNodeIDByP2PID.
func (mr *MockExternalStackMockRecorder[T, Constraint]) GetNodeIDByP2PID(p2pID any) *MockExternalStackGetNodeIDByP2PIDCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeIDByP2PID", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).GetNodeIDByP2PID), p2pID)
	return &MockExternalStackGetNodeIDByP2PIDCall[T, Constraint]{Call: call}
}

// MockExternalStackGetNodeIDByP2PIDCall wrap *gomock.Call
type MockExternalStackGetNodeIDByP2PIDCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackGetNodeIDByP2PIDCall[T, Constraint]) Return(arg0 uint64, arg1 error) *MockExternalStackGetNodeIDByP2PIDCall[T, Constraint] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackGetNodeIDByP2PIDCall[T, Constraint]) Do(f func(string) (uint64, error)) *MockExternalStackGetNodeIDByP2PIDCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackGetNodeIDByP2PIDCall[T, Constraint]) DoAndReturn(f func(string) (uint64, error)) *MockExternalStackGetNodeIDByP2PIDCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNodeInfo mocks base method.
func (m *MockExternalStack[T, Constraint]) GetNodeInfo(nodeID uint64) (*NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeInfo", nodeID)
	ret0, _ := ret[0].(*NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeInfo indicates an expected call of GetNodeInfo.
func (mr *MockExternalStackMockRecorder[T, Constraint]) GetNodeInfo(nodeID any) *MockExternalStackGetNodeInfoCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeInfo", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).GetNodeInfo), nodeID)
	return &MockExternalStackGetNodeInfoCall[T, Constraint]{Call: call}
}

// MockExternalStackGetNodeInfoCall wrap *gomock.Call
type MockExternalStackGetNodeInfoCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackGetNodeInfoCall[T, Constraint]) Return(arg0 *NodeInfo, arg1 error) *MockExternalStackGetNodeInfoCall[T, Constraint] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackGetNodeInfoCall[T, Constraint]) Do(f func(uint64) (*NodeInfo, error)) *MockExternalStackGetNodeInfoCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackGetNodeInfoCall[T, Constraint]) DoAndReturn(f func(uint64) (*NodeInfo, error)) *MockExternalStackGetNodeInfoCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetValidatorSet mocks base method.
func (m *MockExternalStack[T, Constraint]) GetValidatorSet() (map[uint64]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorSet")
	ret0, _ := ret[0].(map[uint64]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorSet indicates an expected call of GetValidatorSet.
func (mr *MockExternalStackMockRecorder[T, Constraint]) GetValidatorSet() *MockExternalStackGetValidatorSetCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorSet", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).GetValidatorSet))
	return &MockExternalStackGetValidatorSetCall[T, Constraint]{Call: call}
}

// MockExternalStackGetValidatorSetCall wrap *gomock.Call
type MockExternalStackGetValidatorSetCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackGetValidatorSetCall[T, Constraint]) Return(arg0 map[uint64]int64, arg1 error) *MockExternalStackGetValidatorSetCall[T, Constraint] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackGetValidatorSetCall[T, Constraint]) Do(f func() (map[uint64]int64, error)) *MockExternalStackGetValidatorSetCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackGetValidatorSetCall[T, Constraint]) DoAndReturn(f func() (map[uint64]int64, error)) *MockExternalStackGetValidatorSetCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadEpochState mocks base method.
func (m *MockExternalStack[T, Constraint]) ReadEpochState(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEpochState", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEpochState indicates an expected call of ReadEpochState.
func (mr *MockExternalStackMockRecorder[T, Constraint]) ReadEpochState(key any) *MockExternalStackReadEpochStateCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEpochState", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).ReadEpochState), key)
	return &MockExternalStackReadEpochStateCall[T, Constraint]{Call: call}
}

// MockExternalStackReadEpochStateCall wrap *gomock.Call
type MockExternalStackReadEpochStateCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackReadEpochStateCall[T, Constraint]) Return(arg0 []byte, arg1 error) *MockExternalStackReadEpochStateCall[T, Constraint] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackReadEpochStateCall[T, Constraint]) Do(f func(string) ([]byte, error)) *MockExternalStackReadEpochStateCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackReadEpochStateCall[T, Constraint]) DoAndReturn(f func(string) ([]byte, error)) *MockExternalStackReadEpochStateCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadState mocks base method.
func (m *MockExternalStack[T, Constraint]) ReadState(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadState", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadState indicates an expected call of ReadState.
func (mr *MockExternalStackMockRecorder[T, Constraint]) ReadState(key any) *MockExternalStackReadStateCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadState", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).ReadState), key)
	return &MockExternalStackReadStateCall[T, Constraint]{Call: call}
}

// MockExternalStackReadStateCall wrap *gomock.Call
type MockExternalStackReadStateCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackReadStateCall[T, Constraint]) Return(arg0 []byte, arg1 error) *MockExternalStackReadStateCall[T, Constraint] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackReadStateCall[T, Constraint]) Do(f func(string) ([]byte, error)) *MockExternalStackReadStateCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackReadStateCall[T, Constraint]) DoAndReturn(f func(string) ([]byte, error)) *MockExternalStackReadStateCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadStateSet mocks base method.
func (m *MockExternalStack[T, Constraint]) ReadStateSet(key string) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStateSet", key)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStateSet indicates an expected call of ReadStateSet.
func (mr *MockExternalStackMockRecorder[T, Constraint]) ReadStateSet(key any) *MockExternalStackReadStateSetCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStateSet", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).ReadStateSet), key)
	return &MockExternalStackReadStateSetCall[T, Constraint]{Call: call}
}

// MockExternalStackReadStateSetCall wrap *gomock.Call
type MockExternalStackReadStateSetCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackReadStateSetCall[T, Constraint]) Return(arg0 map[string][]byte, arg1 error) *MockExternalStackReadStateSetCall[T, Constraint] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackReadStateSetCall[T, Constraint]) Do(f func(string) (map[string][]byte, error)) *MockExternalStackReadStateSetCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackReadStateSetCall[T, Constraint]) DoAndReturn(f func(string) (map[string][]byte, error)) *MockExternalStackReadStateSetCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendFilterEvent mocks base method.
func (m *MockExternalStack[T, Constraint]) SendFilterEvent(informType types.InformType, message ...any) {
	m.ctrl.T.Helper()
	varargs := []any{informType}
	for _, a := range message {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SendFilterEvent", varargs...)
}

// SendFilterEvent indicates an expected call of SendFilterEvent.
func (mr *MockExternalStackMockRecorder[T, Constraint]) SendFilterEvent(informType any, message ...any) *MockExternalStackSendFilterEventCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{informType}, message...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFilterEvent", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).SendFilterEvent), varargs...)
	return &MockExternalStackSendFilterEventCall[T, Constraint]{Call: call}
}

// MockExternalStackSendFilterEventCall wrap *gomock.Call
type MockExternalStackSendFilterEventCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackSendFilterEventCall[T, Constraint]) Return() *MockExternalStackSendFilterEventCall[T, Constraint] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackSendFilterEventCall[T, Constraint]) Do(f func(types.InformType, ...any)) *MockExternalStackSendFilterEventCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackSendFilterEventCall[T, Constraint]) DoAndReturn(f func(types.InformType, ...any)) *MockExternalStackSendFilterEventCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Sign mocks base method.
func (m *MockExternalStack[T, Constraint]) Sign(msg []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockExternalStackMockRecorder[T, Constraint]) Sign(msg any) *MockExternalStackSignCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).Sign), msg)
	return &MockExternalStackSignCall[T, Constraint]{Call: call}
}

// MockExternalStackSignCall wrap *gomock.Call
type MockExternalStackSignCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackSignCall[T, Constraint]) Return(arg0 []byte, arg1 error) *MockExternalStackSignCall[T, Constraint] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackSignCall[T, Constraint]) Do(f func([]byte) ([]byte, error)) *MockExternalStackSignCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackSignCall[T, Constraint]) DoAndReturn(f func([]byte) ([]byte, error)) *MockExternalStackSignCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StateUpdate mocks base method.
func (m *MockExternalStack[T, Constraint]) StateUpdate(localLowWatermark, seqNo uint64, digest string, checkpoints []*consensus.SignedCheckpoint, epochChanges ...*consensus.EpochChange) {
	m.ctrl.T.Helper()
	varargs := []any{localLowWatermark, seqNo, digest, checkpoints}
	for _, a := range epochChanges {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "StateUpdate", varargs...)
}

// StateUpdate indicates an expected call of StateUpdate.
func (mr *MockExternalStackMockRecorder[T, Constraint]) StateUpdate(localLowWatermark, seqNo, digest, checkpoints any, epochChanges ...any) *MockExternalStackStateUpdateCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{localLowWatermark, seqNo, digest, checkpoints}, epochChanges...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateUpdate", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).StateUpdate), varargs...)
	return &MockExternalStackStateUpdateCall[T, Constraint]{Call: call}
}

// MockExternalStackStateUpdateCall wrap *gomock.Call
type MockExternalStackStateUpdateCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackStateUpdateCall[T, Constraint]) Return() *MockExternalStackStateUpdateCall[T, Constraint] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackStateUpdateCall[T, Constraint]) Do(f func(uint64, uint64, string, []*consensus.SignedCheckpoint, ...*consensus.EpochChange)) *MockExternalStackStateUpdateCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackStateUpdateCall[T, Constraint]) DoAndReturn(f func(uint64, uint64, string, []*consensus.SignedCheckpoint, ...*consensus.EpochChange)) *MockExternalStackStateUpdateCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StoreEpochState mocks base method.
func (m *MockExternalStack[T, Constraint]) StoreEpochState(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreEpochState", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreEpochState indicates an expected call of StoreEpochState.
func (mr *MockExternalStackMockRecorder[T, Constraint]) StoreEpochState(key, value any) *MockExternalStackStoreEpochStateCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEpochState", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).StoreEpochState), key, value)
	return &MockExternalStackStoreEpochStateCall[T, Constraint]{Call: call}
}

// MockExternalStackStoreEpochStateCall wrap *gomock.Call
type MockExternalStackStoreEpochStateCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackStoreEpochStateCall[T, Constraint]) Return(arg0 error) *MockExternalStackStoreEpochStateCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackStoreEpochStateCall[T, Constraint]) Do(f func(string, []byte) error) *MockExternalStackStoreEpochStateCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackStoreEpochStateCall[T, Constraint]) DoAndReturn(f func(string, []byte) error) *MockExternalStackStoreEpochStateCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StoreState mocks base method.
func (m *MockExternalStack[T, Constraint]) StoreState(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreState", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreState indicates an expected call of StoreState.
func (mr *MockExternalStackMockRecorder[T, Constraint]) StoreState(key, value any) *MockExternalStackStoreStateCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreState", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).StoreState), key, value)
	return &MockExternalStackStoreStateCall[T, Constraint]{Call: call}
}

// MockExternalStackStoreStateCall wrap *gomock.Call
type MockExternalStackStoreStateCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackStoreStateCall[T, Constraint]) Return(arg0 error) *MockExternalStackStoreStateCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackStoreStateCall[T, Constraint]) Do(f func(string, []byte) error) *MockExternalStackStoreStateCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackStoreStateCall[T, Constraint]) DoAndReturn(f func(string, []byte) error) *MockExternalStackStoreStateCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unicast mocks base method.
func (m *MockExternalStack[T, Constraint]) Unicast(ctx context.Context, msg *consensus.ConsensusMessage, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unicast", ctx, msg, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unicast indicates an expected call of Unicast.
func (mr *MockExternalStackMockRecorder[T, Constraint]) Unicast(ctx, msg, to any) *MockExternalStackUnicastCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unicast", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).Unicast), ctx, msg, to)
	return &MockExternalStackUnicastCall[T, Constraint]{Call: call}
}

// MockExternalStackUnicastCall wrap *gomock.Call
type MockExternalStackUnicastCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackUnicastCall[T, Constraint]) Return(arg0 error) *MockExternalStackUnicastCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackUnicastCall[T, Constraint]) Do(f func(context.Context, *consensus.ConsensusMessage, string) error) *MockExternalStackUnicastCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackUnicastCall[T, Constraint]) DoAndReturn(f func(context.Context, *consensus.ConsensusMessage, string) error) *MockExternalStackUnicastCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Verify mocks base method.
func (m *MockExternalStack[T, Constraint]) Verify(nodeID uint64, signature, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", nodeID, signature, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockExternalStackMockRecorder[T, Constraint]) Verify(nodeID, signature, msg any) *MockExternalStackVerifyCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockExternalStack[T, Constraint])(nil).Verify), nodeID, signature, msg)
	return &MockExternalStackVerifyCall[T, Constraint]{Call: call}
}

// MockExternalStackVerifyCall wrap *gomock.Call
type MockExternalStackVerifyCall[T any, Constraint types0.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExternalStackVerifyCall[T, Constraint]) Return(arg0 error) *MockExternalStackVerifyCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExternalStackVerifyCall[T, Constraint]) Do(f func(uint64, []byte, []byte) error) *MockExternalStackVerifyCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExternalStackVerifyCall[T, Constraint]) DoAndReturn(f func(uint64, []byte, []byte) error) *MockExternalStackVerifyCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
