// Copyright 2016-2017 Hyperchain Corp.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "checkpoint.proto";

package consensus;

enum Type {
    NULL_REQUEST = 0;
    PRE_PREPARE = 1;
    PREPARE = 2;
    COMMIT = 3;
    REQUEST_SET = 4;
    SIGNED_CHECKPOINT = 5;
    FETCH_CHECKPOINT = 6;
    VIEW_CHANGE = 7;
    QUORUM_VIEW_CHANGE = 8;
    NEW_VIEW = 9;
    FETCH_VIEW = 10;
    RECOVERY_RESPONSE = 11;
    FETCH_BATCH_REQUEST = 12;
    FETCH_BATCH_RESPONSE = 13;
    FETCH_PQC_REQUEST = 14;
    FETCH_PQC_RESPONSE = 15;
    FETCH_MISSING_REQUEST = 16;
    FETCH_MISSING_RESPONSE = 17;
    SYNC_STATE = 18;
    SYNC_STATE_RESPONSE = 19;
    EPOCH_CHANGE_REQUEST = 20;
    EPOCH_CHANGE_PROOF = 21;
}

message consensus_message {
    Type type = 1;
    uint64 from = 2;
    uint64 to = 3;
    uint64 epoch = 4;
    uint64 view = 5;
    bytes payload = 6;
}

message null_request {
    uint64 replica_id = 1;
}

message pre_prepare {
    uint64 replica_id = 1;
    uint64 view = 2;
    uint64 sequence_number = 3;
    string batch_digest = 4;
    hash_batch hash_batch = 5;
}

message prepare {
    uint64 replica_id = 1;
    uint64 view = 2;
    uint64 sequence_number = 3;
    string batch_digest = 4;
}

message commit {
    uint64 replica_id = 1;
    uint64 view = 2;
    uint64 sequence_number = 3;
    string batch_digest = 4;
}

message request_set {
    repeated bytes requests = 1;
    bool local = 2;
}

message hash_batch {
    repeated string request_hash_list = 1;
    repeated string de_duplicate_request_hash_list = 2;
    int64 timestamp = 3;
}

message fetch_checkpoint {
    uint64 replica_id = 1;
    uint64 sequence_number = 2;
}

message view_change {
    bytes basis = 1;
    bytes    signature = 2;
    int64    timestamp = 3;
    bool recovery = 4;
}

message vc_basis {
    uint64   replica_id = 1;
    uint64   view = 2;
    uint64   h = 3;
    repeated vc_PQ pset = 4;
    repeated vc_PQ qset = 5;
    repeated consensus.SignedCheckpoint cset = 6;
}

message vc_PQ {
    uint64 sequence_number = 1;
    string batch_digest = 2;
    uint64 view = 3;
}

message quorum_view_change {
    uint64   replica_id = 1;
    repeated view_change view_changes = 2;
}

message new_view {
    uint64 replica_id = 1;
    uint64 view = 2;
    repeated vc_PQ xset = 3;
    quorum_view_change view_change_set = 4;
    consensus.QuorumCheckpoint quorum_checkpoint = 5;
    bytes    signature = 6;
}

message fetch_view {
    uint64 replica_id = 1;
    uint64 view = 2;
}

message recovery_response {
    new_view new_view = 1;
    consensus.SignedCheckpoint initial_checkpoint = 2;
}

message fetch_batch_request {
    uint64 replica_id = 1;
    string batch_digest = 2;
}

message fetch_batch_response {
    uint64 replica_id = 1;
    request_batch batch = 2;
    string batch_digest = 3;
}

message request_batch {
    repeated string request_hash_list = 1;
    repeated bytes request_list = 2;
    int64 timestamp = 3;
    uint64 seq_no = 4;
    repeated bool local_list = 5;
    string batch_hash = 6;
}

message fetch_missing_request {
    uint64 replica_id = 1;
    uint64 view = 2;
    uint64 sequence_number = 3;
    string batch_digest = 4;
    map<uint64, string> missing_request_hashes = 5;
}

message fetch_missing_response {
    uint64 replica_id = 1;
    uint64 view = 2;
    uint64 sequence_number = 3;
    string batch_digest = 4;
    map<uint64, string> missing_request_hashes = 5;
    map<uint64, bytes> missing_requests = 6;
}

message fetchPQC_request {
    uint64 replica_id = 1;
    uint64 h = 2;
}

message fetchPQC_response {
    uint64   replica_id = 1;
    repeated pre_prepare prepre_set = 2;
    repeated prepare pre_set = 3;
    repeated commit cmt_set = 4;
}

message sync_state {
    uint64 replica_id = 1;
}

message sync_state_response {
    uint64 replica_id = 1;
    uint64 view = 2;
    consensus.SignedCheckpoint signed_checkpoint = 3;
}

// EpochChangeRequest is used to get a EpochChangeProof from start_epoch to target_epoch.
message EpochChangeRequest {
    // Author of the request.
    string author = 1;
    // The start epoch for the request.
    uint64 start_epoch = 2;
    // The target epoch for the request
    uint64 target_epoch = 3;
}

message Pset {
    repeated prepare set = 1;
}

message Cset {
    repeated commit set = 1;
}
