// Copyright 2016-2017 Hyperchain Corp.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package consensus;

option go_package = "../consensus";

enum Type {
    NULL_REQUEST = 0;
    PRE_PREPARE = 1;
    PREPARE = 2;
    COMMIT = 3;
    REBROADCAST_REQUEST_SET = 4;
    SIGNED_CHECKPOINT = 5;
    FETCH_CHECKPOINT = 6;
    VIEW_CHANGE = 7;
    QUORUM_VIEW_CHANGE = 8;
    NEW_VIEW = 9;
    FETCH_VIEW = 10;
    RECOVERY_RESPONSE = 11;
    FETCH_BATCH_REQUEST = 12;
    FETCH_BATCH_RESPONSE = 13;
    FETCH_PQC_REQUEST = 14;
    FETCH_PQC_RESPONSE = 15;
    FETCH_MISSING_REQUEST = 16;
    FETCH_MISSING_RESPONSE = 17;
    SYNC_STATE = 18;
    SYNC_STATE_RESPONSE = 19;
    EPOCH_CHANGE_REQUEST = 20;
    EPOCH_CHANGE_PROOF = 21;
}

message ConsensusMessage {
    Type type = 1;
    uint64 from = 2;
    uint64 to = 3;
    uint64 epoch = 4;
    uint64 view = 5;
    bytes payload = 6;
    int64 nonce = 7;
}

message NullRequest {
    uint64 replica_id = 1;
}

message PrePrepare {
    uint64 replica_id = 1;
    uint64 view = 2;
    uint64 sequence_number = 3;
    string batch_digest = 4;
    HashBatch hash_batch = 5;
}

message Prepare {
    uint64 replica_id = 1;
    uint64 view = 2;
    uint64 sequence_number = 3;
    string batch_digest = 4;
}

message Commit {
    uint64 replica_id = 1;
    uint64 view = 2;
    uint64 sequence_number = 3;
    string batch_digest = 4;
}

message ReBroadcastRequestSet {
    uint64 replica_id = 1;
    repeated bytes requests = 2;
}

message HashBatch {
    repeated string request_hash_list = 1;
    repeated string de_duplicate_request_hash_list = 2;
    int64 timestamp = 3;
    uint64 proposer = 4;
}

message FetchCheckpoint {
    uint64 replica_id = 1;
    uint64 sequence_number = 2;
}

message ViewChange {
    VcBasis basis = 1;
    bytes signature = 2;
    int64 timestamp = 3;
    bool recovery = 4;
}

message VcBasis {
    uint64 replica_id = 1;
    uint64 view = 2;
    uint64 h = 3;
    repeated VcPq pset = 4;
    repeated VcPq qset = 5;
    repeated SignedCheckpoint cset = 6;
    repeated NodeDynamicInfo validator_dynamic_info = 7;
}

message VcPq {
    uint64 sequence_number = 1;
    string batch_digest = 2;
    uint64 view = 3;
}

message QuorumViewChange {
    uint64 replica_id = 1;
    repeated ViewChange view_changes = 2;
}

message NodeDynamicInfo {
    uint64 id = 1;
    int64 consensus_voting_power = 2;
    bool consensus_voting_power_reduced = 3;
    uint64 consensus_voting_power_reduce_view = 4;
}

message NewView {
    // new primary id
    uint64 replica_id = 1;
    uint64 view = 2;
    repeated VcPq xset = 3;
    QuorumViewChange view_change_set = 4;
    QuorumCheckpoint quorum_checkpoint = 5;
    bytes signature = 6;
    // signed from replica id(for wrf check)
    uint64 from_id = 7;
    bool auto_term_update = 8;
    repeated NodeDynamicInfo validator_dynamic_info = 9;
}

message FetchView {
    uint64 replica_id = 1;
    uint64 view = 2;
}

message RecoveryResponse {
    NewView new_view = 1;
    SignedCheckpoint initial_checkpoint = 2;
    // Help remote check genesis block digest
    string genesis_block_digest = 3;
}

message FetchBatchRequest {
    uint64 replica_id = 1;
    string batch_digest = 2;
}

message FetchBatchResponse {
    uint64 replica_id = 1;
    RequestBatch batch = 2;
    string batch_digest = 3;
}

message RequestBatch {
    repeated string request_hash_list = 1;
    repeated bytes request_list = 2;
    int64 timestamp = 3;
    uint64 seq_no = 4;
    repeated bool local_list = 5;
    string batch_hash = 6;
    uint64 proposer = 7;
}

message FetchMissingRequest {
    uint64 replica_id = 1;
    uint64 view = 2;
    uint64 sequence_number = 3;
    string batch_digest = 4;
    map<uint64, string> missing_request_hashes = 5;
}

message FetchMissingResponse {
    uint64 replica_id = 1;
    uint64 view = 2;
    uint64 sequence_number = 3;
    string batch_digest = 4;
    map<uint64, string> missing_request_hashes = 5;
    map<uint64, bytes> missing_requests = 6;
}

message FetchPQCRequest {
    uint64 replica_id = 1;
    uint64 h = 2;
}

message FetchPQCResponse {
    uint64 replica_id = 1;
    repeated PrePrepare prepre_set = 2;
    repeated Prepare pre_set = 3;
    repeated Commit cmt_set = 4;
}

message SyncState {
    uint64 replica_id = 1;
}

message SyncStateResponse {
    uint64 replica_id = 1;
    uint64 view = 2;
    SignedCheckpoint signed_checkpoint = 3;
}

// EpochChangeRequest is used to get a EpochChangeProof from start_epoch to target_epoch.
message EpochChangeRequest {
    // Author of the request.
    uint64 author = 1;
    // The start epoch for the request.
    uint64 start_epoch = 2;
    // The target epoch for the request
    uint64 target_epoch = 3;
    string author_account = 4;
}

message Pset {
    repeated Prepare set = 1;
}

message Cset {
    repeated Commit set = 1;
}

message Checkpoint {
    uint64 epoch = 1;

    // Execute state of the executed block
    message ExecuteState {
        uint64 height = 1;
        string digest = 2;
    }
    ExecuteState execute_state = 2;

    bool need_update_epoch = 3;

    ViewChange view_change = 4;
}

// SignedCheckpoint contains the actual checkpoint with signature
message SignedCheckpoint {
    // Checkpoint is the info of checkpoint.
    Checkpoint checkpoint = 1;
    // Author is the signer for signature.
    uint64 author = 2;
    // Signature is the signature for checkpoint.
    bytes signature = 3;
}

// QuorumCheckpoint contains the actual checkpoint with signatures
// by different quorum validators
message QuorumCheckpoint {
    // Checkpoint is the info of checkpoint.
    Checkpoint checkpoint = 1;
    // Signatures is the aggregated signature for checkpoint.
    map<uint64, bytes> signatures = 2;
}

// EpochChangeProof is a slice of checkpoints with contiguous increasing epoch numbers
// to prove a sequence if epoch changes from the first checkpoint's epoch
message EpochChangeProof {
    repeated EpochChange epoch_changes = 1;
    // Indicate whether the node where proof comes from has more epoch changes
    uint64 more = 2;
    // Where the proof comes from
    uint64 author = 3;
    // Help remote check genesis block digest
    string genesis_block_digest = 4;
}

message EpochChange {
    // The slice of quorum checkpoints
    QuorumCheckpoint checkpoint = 1;
    // Help remote node sync from validators
    repeated string validators = 2;
    // local node's quorum height
    uint64 low_watermark = 3;
}