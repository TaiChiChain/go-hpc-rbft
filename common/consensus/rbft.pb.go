// Copyright 2016-2017 Hyperchain Corp.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: rbft.proto

package consensus

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_NULL_REQUEST            Type = 0
	Type_PRE_PREPARE             Type = 1
	Type_PREPARE                 Type = 2
	Type_COMMIT                  Type = 3
	Type_REBROADCAST_REQUEST_SET Type = 4
	Type_SIGNED_CHECKPOINT       Type = 5
	Type_FETCH_CHECKPOINT        Type = 6
	Type_VIEW_CHANGE             Type = 7
	Type_QUORUM_VIEW_CHANGE      Type = 8
	Type_NEW_VIEW                Type = 9
	Type_FETCH_VIEW              Type = 10
	Type_RECOVERY_RESPONSE       Type = 11
	Type_FETCH_BATCH_REQUEST     Type = 12
	Type_FETCH_BATCH_RESPONSE    Type = 13
	Type_FETCH_PQC_REQUEST       Type = 14
	Type_FETCH_PQC_RESPONSE      Type = 15
	Type_FETCH_MISSING_REQUEST   Type = 16
	Type_FETCH_MISSING_RESPONSE  Type = 17
	Type_SYNC_STATE              Type = 18
	Type_SYNC_STATE_RESPONSE     Type = 19
	Type_EPOCH_CHANGE_REQUEST    Type = 20
	Type_EPOCH_CHANGE_PROOF      Type = 21
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0:  "NULL_REQUEST",
		1:  "PRE_PREPARE",
		2:  "PREPARE",
		3:  "COMMIT",
		4:  "REBROADCAST_REQUEST_SET",
		5:  "SIGNED_CHECKPOINT",
		6:  "FETCH_CHECKPOINT",
		7:  "VIEW_CHANGE",
		8:  "QUORUM_VIEW_CHANGE",
		9:  "NEW_VIEW",
		10: "FETCH_VIEW",
		11: "RECOVERY_RESPONSE",
		12: "FETCH_BATCH_REQUEST",
		13: "FETCH_BATCH_RESPONSE",
		14: "FETCH_PQC_REQUEST",
		15: "FETCH_PQC_RESPONSE",
		16: "FETCH_MISSING_REQUEST",
		17: "FETCH_MISSING_RESPONSE",
		18: "SYNC_STATE",
		19: "SYNC_STATE_RESPONSE",
		20: "EPOCH_CHANGE_REQUEST",
		21: "EPOCH_CHANGE_PROOF",
	}
	Type_value = map[string]int32{
		"NULL_REQUEST":            0,
		"PRE_PREPARE":             1,
		"PREPARE":                 2,
		"COMMIT":                  3,
		"REBROADCAST_REQUEST_SET": 4,
		"SIGNED_CHECKPOINT":       5,
		"FETCH_CHECKPOINT":        6,
		"VIEW_CHANGE":             7,
		"QUORUM_VIEW_CHANGE":      8,
		"NEW_VIEW":                9,
		"FETCH_VIEW":              10,
		"RECOVERY_RESPONSE":       11,
		"FETCH_BATCH_REQUEST":     12,
		"FETCH_BATCH_RESPONSE":    13,
		"FETCH_PQC_REQUEST":       14,
		"FETCH_PQC_RESPONSE":      15,
		"FETCH_MISSING_REQUEST":   16,
		"FETCH_MISSING_RESPONSE":  17,
		"SYNC_STATE":              18,
		"SYNC_STATE_RESPONSE":     19,
		"EPOCH_CHANGE_REQUEST":    20,
		"EPOCH_CHANGE_PROOF":      21,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_rbft_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_rbft_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{0}
}

type ConsensusMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    Type   `protobuf:"varint,1,opt,name=type,proto3,enum=consensus.Type" json:"type,omitempty"`
	From    uint64 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To      uint64 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	Epoch   uint64 `protobuf:"varint,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	View    uint64 `protobuf:"varint,5,opt,name=view,proto3" json:"view,omitempty"`
	Payload []byte `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	Nonce   int64  `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *ConsensusMessage) Reset() {
	*x = ConsensusMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusMessage) ProtoMessage() {}

func (x *ConsensusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusMessage.ProtoReflect.Descriptor instead.
func (*ConsensusMessage) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{0}
}

func (x *ConsensusMessage) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_NULL_REQUEST
}

func (x *ConsensusMessage) GetFrom() uint64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *ConsensusMessage) GetTo() uint64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *ConsensusMessage) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ConsensusMessage) GetView() uint64 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *ConsensusMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ConsensusMessage) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type NullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
}

func (x *NullRequest) Reset() {
	*x = NullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullRequest) ProtoMessage() {}

func (x *NullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullRequest.ProtoReflect.Descriptor instead.
func (*NullRequest) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{1}
}

func (x *NullRequest) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

type PrePrepare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId      uint64     `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	View           uint64     `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	SequenceNumber uint64     `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	BatchDigest    string     `protobuf:"bytes,4,opt,name=batch_digest,json=batchDigest,proto3" json:"batch_digest,omitempty"`
	HashBatch      *HashBatch `protobuf:"bytes,5,opt,name=hash_batch,json=hashBatch,proto3" json:"hash_batch,omitempty"`
}

func (x *PrePrepare) Reset() {
	*x = PrePrepare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrePrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrePrepare) ProtoMessage() {}

func (x *PrePrepare) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrePrepare.ProtoReflect.Descriptor instead.
func (*PrePrepare) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{2}
}

func (x *PrePrepare) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *PrePrepare) GetView() uint64 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *PrePrepare) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *PrePrepare) GetBatchDigest() string {
	if x != nil {
		return x.BatchDigest
	}
	return ""
}

func (x *PrePrepare) GetHashBatch() *HashBatch {
	if x != nil {
		return x.HashBatch
	}
	return nil
}

type Prepare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId      uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	View           uint64 `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	SequenceNumber uint64 `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	BatchDigest    string `protobuf:"bytes,4,opt,name=batch_digest,json=batchDigest,proto3" json:"batch_digest,omitempty"`
}

func (x *Prepare) Reset() {
	*x = Prepare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prepare) ProtoMessage() {}

func (x *Prepare) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prepare.ProtoReflect.Descriptor instead.
func (*Prepare) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{3}
}

func (x *Prepare) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *Prepare) GetView() uint64 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *Prepare) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Prepare) GetBatchDigest() string {
	if x != nil {
		return x.BatchDigest
	}
	return ""
}

type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId      uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	View           uint64 `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	SequenceNumber uint64 `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	BatchDigest    string `protobuf:"bytes,4,opt,name=batch_digest,json=batchDigest,proto3" json:"batch_digest,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{4}
}

func (x *Commit) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *Commit) GetView() uint64 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *Commit) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Commit) GetBatchDigest() string {
	if x != nil {
		return x.BatchDigest
	}
	return ""
}

type ReBroadcastRequestSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId uint64   `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	Requests  [][]byte `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *ReBroadcastRequestSet) Reset() {
	*x = ReBroadcastRequestSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReBroadcastRequestSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReBroadcastRequestSet) ProtoMessage() {}

func (x *ReBroadcastRequestSet) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReBroadcastRequestSet.ProtoReflect.Descriptor instead.
func (*ReBroadcastRequestSet) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{5}
}

func (x *ReBroadcastRequestSet) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *ReBroadcastRequestSet) GetRequests() [][]byte {
	if x != nil {
		return x.Requests
	}
	return nil
}

type HashBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHashList            []string `protobuf:"bytes,1,rep,name=request_hash_list,json=requestHashList,proto3" json:"request_hash_list,omitempty"`
	DeDuplicateRequestHashList []string `protobuf:"bytes,2,rep,name=de_duplicate_request_hash_list,json=deDuplicateRequestHashList,proto3" json:"de_duplicate_request_hash_list,omitempty"`
	Timestamp                  int64    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Proposer                   uint64   `protobuf:"varint,4,opt,name=proposer,proto3" json:"proposer,omitempty"`
}

func (x *HashBatch) Reset() {
	*x = HashBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashBatch) ProtoMessage() {}

func (x *HashBatch) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashBatch.ProtoReflect.Descriptor instead.
func (*HashBatch) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{6}
}

func (x *HashBatch) GetRequestHashList() []string {
	if x != nil {
		return x.RequestHashList
	}
	return nil
}

func (x *HashBatch) GetDeDuplicateRequestHashList() []string {
	if x != nil {
		return x.DeDuplicateRequestHashList
	}
	return nil
}

func (x *HashBatch) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HashBatch) GetProposer() uint64 {
	if x != nil {
		return x.Proposer
	}
	return 0
}

type FetchCheckpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId      uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	SequenceNumber uint64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *FetchCheckpoint) Reset() {
	*x = FetchCheckpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchCheckpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchCheckpoint) ProtoMessage() {}

func (x *FetchCheckpoint) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchCheckpoint.ProtoReflect.Descriptor instead.
func (*FetchCheckpoint) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{7}
}

func (x *FetchCheckpoint) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *FetchCheckpoint) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type ViewChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Basis     *VcBasis `protobuf:"bytes,1,opt,name=basis,proto3" json:"basis,omitempty"`
	Signature []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Timestamp int64    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Recovery  bool     `protobuf:"varint,4,opt,name=recovery,proto3" json:"recovery,omitempty"`
}

func (x *ViewChange) Reset() {
	*x = ViewChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewChange) ProtoMessage() {}

func (x *ViewChange) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewChange.ProtoReflect.Descriptor instead.
func (*ViewChange) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{8}
}

func (x *ViewChange) GetBasis() *VcBasis {
	if x != nil {
		return x.Basis
	}
	return nil
}

func (x *ViewChange) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ViewChange) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ViewChange) GetRecovery() bool {
	if x != nil {
		return x.Recovery
	}
	return false
}

type VcBasis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId uint64              `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	View      uint64              `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	H         uint64              `protobuf:"varint,3,opt,name=h,proto3" json:"h,omitempty"`
	Pset      []*VcPq             `protobuf:"bytes,4,rep,name=pset,proto3" json:"pset,omitempty"`
	Qset      []*VcPq             `protobuf:"bytes,5,rep,name=qset,proto3" json:"qset,omitempty"`
	Cset      []*SignedCheckpoint `protobuf:"bytes,6,rep,name=cset,proto3" json:"cset,omitempty"`
}

func (x *VcBasis) Reset() {
	*x = VcBasis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VcBasis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VcBasis) ProtoMessage() {}

func (x *VcBasis) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VcBasis.ProtoReflect.Descriptor instead.
func (*VcBasis) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{9}
}

func (x *VcBasis) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *VcBasis) GetView() uint64 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *VcBasis) GetH() uint64 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *VcBasis) GetPset() []*VcPq {
	if x != nil {
		return x.Pset
	}
	return nil
}

func (x *VcBasis) GetQset() []*VcPq {
	if x != nil {
		return x.Qset
	}
	return nil
}

func (x *VcBasis) GetCset() []*SignedCheckpoint {
	if x != nil {
		return x.Cset
	}
	return nil
}

type VcPq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber uint64 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	BatchDigest    string `protobuf:"bytes,2,opt,name=batch_digest,json=batchDigest,proto3" json:"batch_digest,omitempty"`
	View           uint64 `protobuf:"varint,3,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *VcPq) Reset() {
	*x = VcPq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VcPq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VcPq) ProtoMessage() {}

func (x *VcPq) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VcPq.ProtoReflect.Descriptor instead.
func (*VcPq) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{10}
}

func (x *VcPq) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *VcPq) GetBatchDigest() string {
	if x != nil {
		return x.BatchDigest
	}
	return ""
}

func (x *VcPq) GetView() uint64 {
	if x != nil {
		return x.View
	}
	return 0
}

type QuorumViewChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId   uint64        `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	ViewChanges []*ViewChange `protobuf:"bytes,2,rep,name=view_changes,json=viewChanges,proto3" json:"view_changes,omitempty"`
}

func (x *QuorumViewChange) Reset() {
	*x = QuorumViewChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuorumViewChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuorumViewChange) ProtoMessage() {}

func (x *QuorumViewChange) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuorumViewChange.ProtoReflect.Descriptor instead.
func (*QuorumViewChange) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{11}
}

func (x *QuorumViewChange) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *QuorumViewChange) GetViewChanges() []*ViewChange {
	if x != nil {
		return x.ViewChanges
	}
	return nil
}

type NodeDynamicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ConsensusVotingPower           int64  `protobuf:"varint,2,opt,name=consensus_voting_power,json=consensusVotingPower,proto3" json:"consensus_voting_power,omitempty"`
	ConsensusVotingPowerReduced    bool   `protobuf:"varint,3,opt,name=consensus_voting_power_reduced,json=consensusVotingPowerReduced,proto3" json:"consensus_voting_power_reduced,omitempty"`
	ConsensusVotingPowerReduceView uint64 `protobuf:"varint,4,opt,name=consensus_voting_power_reduce_view,json=consensusVotingPowerReduceView,proto3" json:"consensus_voting_power_reduce_view,omitempty"`
}

func (x *NodeDynamicInfo) Reset() {
	*x = NodeDynamicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDynamicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDynamicInfo) ProtoMessage() {}

func (x *NodeDynamicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDynamicInfo.ProtoReflect.Descriptor instead.
func (*NodeDynamicInfo) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{12}
}

func (x *NodeDynamicInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NodeDynamicInfo) GetConsensusVotingPower() int64 {
	if x != nil {
		return x.ConsensusVotingPower
	}
	return 0
}

func (x *NodeDynamicInfo) GetConsensusVotingPowerReduced() bool {
	if x != nil {
		return x.ConsensusVotingPowerReduced
	}
	return false
}

func (x *NodeDynamicInfo) GetConsensusVotingPowerReduceView() uint64 {
	if x != nil {
		return x.ConsensusVotingPowerReduceView
	}
	return 0
}

type NewView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// new primary id
	ReplicaId        uint64            `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	View             uint64            `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	Xset             []*VcPq           `protobuf:"bytes,3,rep,name=xset,proto3" json:"xset,omitempty"`
	ViewChangeSet    *QuorumViewChange `protobuf:"bytes,4,opt,name=view_change_set,json=viewChangeSet,proto3" json:"view_change_set,omitempty"`
	QuorumCheckpoint *QuorumCheckpoint `protobuf:"bytes,5,opt,name=quorum_checkpoint,json=quorumCheckpoint,proto3" json:"quorum_checkpoint,omitempty"`
	Signature        []byte            `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	// signed from replica id(for wrf check)
	FromId               uint64             `protobuf:"varint,7,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	AutoTermUpdate       bool               `protobuf:"varint,8,opt,name=auto_term_update,json=autoTermUpdate,proto3" json:"auto_term_update,omitempty"`
	ValidatorDynamicInfo []*NodeDynamicInfo `protobuf:"bytes,9,rep,name=validator_dynamic_info,json=validatorDynamicInfo,proto3" json:"validator_dynamic_info,omitempty"`
}

func (x *NewView) Reset() {
	*x = NewView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewView) ProtoMessage() {}

func (x *NewView) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewView.ProtoReflect.Descriptor instead.
func (*NewView) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{13}
}

func (x *NewView) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *NewView) GetView() uint64 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *NewView) GetXset() []*VcPq {
	if x != nil {
		return x.Xset
	}
	return nil
}

func (x *NewView) GetViewChangeSet() *QuorumViewChange {
	if x != nil {
		return x.ViewChangeSet
	}
	return nil
}

func (x *NewView) GetQuorumCheckpoint() *QuorumCheckpoint {
	if x != nil {
		return x.QuorumCheckpoint
	}
	return nil
}

func (x *NewView) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *NewView) GetFromId() uint64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *NewView) GetAutoTermUpdate() bool {
	if x != nil {
		return x.AutoTermUpdate
	}
	return false
}

func (x *NewView) GetValidatorDynamicInfo() []*NodeDynamicInfo {
	if x != nil {
		return x.ValidatorDynamicInfo
	}
	return nil
}

type FetchView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	View      uint64 `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
}

func (x *FetchView) Reset() {
	*x = FetchView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchView) ProtoMessage() {}

func (x *FetchView) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchView.ProtoReflect.Descriptor instead.
func (*FetchView) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{14}
}

func (x *FetchView) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *FetchView) GetView() uint64 {
	if x != nil {
		return x.View
	}
	return 0
}

type RecoveryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewView           *NewView          `protobuf:"bytes,1,opt,name=new_view,json=newView,proto3" json:"new_view,omitempty"`
	InitialCheckpoint *SignedCheckpoint `protobuf:"bytes,2,opt,name=initial_checkpoint,json=initialCheckpoint,proto3" json:"initial_checkpoint,omitempty"`
	// Help remote check genesis block digest
	GenesisBlockDigest string `protobuf:"bytes,3,opt,name=genesis_block_digest,json=genesisBlockDigest,proto3" json:"genesis_block_digest,omitempty"`
}

func (x *RecoveryResponse) Reset() {
	*x = RecoveryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryResponse) ProtoMessage() {}

func (x *RecoveryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoveryResponse.ProtoReflect.Descriptor instead.
func (*RecoveryResponse) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{15}
}

func (x *RecoveryResponse) GetNewView() *NewView {
	if x != nil {
		return x.NewView
	}
	return nil
}

func (x *RecoveryResponse) GetInitialCheckpoint() *SignedCheckpoint {
	if x != nil {
		return x.InitialCheckpoint
	}
	return nil
}

func (x *RecoveryResponse) GetGenesisBlockDigest() string {
	if x != nil {
		return x.GenesisBlockDigest
	}
	return ""
}

type FetchBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId   uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	BatchDigest string `protobuf:"bytes,2,opt,name=batch_digest,json=batchDigest,proto3" json:"batch_digest,omitempty"`
}

func (x *FetchBatchRequest) Reset() {
	*x = FetchBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchBatchRequest) ProtoMessage() {}

func (x *FetchBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchBatchRequest.ProtoReflect.Descriptor instead.
func (*FetchBatchRequest) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{16}
}

func (x *FetchBatchRequest) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *FetchBatchRequest) GetBatchDigest() string {
	if x != nil {
		return x.BatchDigest
	}
	return ""
}

type FetchBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId   uint64        `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	Batch       *RequestBatch `protobuf:"bytes,2,opt,name=batch,proto3" json:"batch,omitempty"`
	BatchDigest string        `protobuf:"bytes,3,opt,name=batch_digest,json=batchDigest,proto3" json:"batch_digest,omitempty"`
}

func (x *FetchBatchResponse) Reset() {
	*x = FetchBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchBatchResponse) ProtoMessage() {}

func (x *FetchBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchBatchResponse.ProtoReflect.Descriptor instead.
func (*FetchBatchResponse) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{17}
}

func (x *FetchBatchResponse) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *FetchBatchResponse) GetBatch() *RequestBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *FetchBatchResponse) GetBatchDigest() string {
	if x != nil {
		return x.BatchDigest
	}
	return ""
}

type RequestBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestHashList []string `protobuf:"bytes,1,rep,name=request_hash_list,json=requestHashList,proto3" json:"request_hash_list,omitempty"`
	RequestList     [][]byte `protobuf:"bytes,2,rep,name=request_list,json=requestList,proto3" json:"request_list,omitempty"`
	Timestamp       int64    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SeqNo           uint64   `protobuf:"varint,4,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	LocalList       []bool   `protobuf:"varint,5,rep,packed,name=local_list,json=localList,proto3" json:"local_list,omitempty"`
	BatchHash       string   `protobuf:"bytes,6,opt,name=batch_hash,json=batchHash,proto3" json:"batch_hash,omitempty"`
	Proposer        uint64   `protobuf:"varint,7,opt,name=proposer,proto3" json:"proposer,omitempty"`
}

func (x *RequestBatch) Reset() {
	*x = RequestBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBatch) ProtoMessage() {}

func (x *RequestBatch) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBatch.ProtoReflect.Descriptor instead.
func (*RequestBatch) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{18}
}

func (x *RequestBatch) GetRequestHashList() []string {
	if x != nil {
		return x.RequestHashList
	}
	return nil
}

func (x *RequestBatch) GetRequestList() [][]byte {
	if x != nil {
		return x.RequestList
	}
	return nil
}

func (x *RequestBatch) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RequestBatch) GetSeqNo() uint64 {
	if x != nil {
		return x.SeqNo
	}
	return 0
}

func (x *RequestBatch) GetLocalList() []bool {
	if x != nil {
		return x.LocalList
	}
	return nil
}

func (x *RequestBatch) GetBatchHash() string {
	if x != nil {
		return x.BatchHash
	}
	return ""
}

func (x *RequestBatch) GetProposer() uint64 {
	if x != nil {
		return x.Proposer
	}
	return 0
}

type FetchMissingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId            uint64            `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	View                 uint64            `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	SequenceNumber       uint64            `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	BatchDigest          string            `protobuf:"bytes,4,opt,name=batch_digest,json=batchDigest,proto3" json:"batch_digest,omitempty"`
	MissingRequestHashes map[uint64]string `protobuf:"bytes,5,rep,name=missing_request_hashes,json=missingRequestHashes,proto3" json:"missing_request_hashes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FetchMissingRequest) Reset() {
	*x = FetchMissingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchMissingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMissingRequest) ProtoMessage() {}

func (x *FetchMissingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMissingRequest.ProtoReflect.Descriptor instead.
func (*FetchMissingRequest) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{19}
}

func (x *FetchMissingRequest) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *FetchMissingRequest) GetView() uint64 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *FetchMissingRequest) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *FetchMissingRequest) GetBatchDigest() string {
	if x != nil {
		return x.BatchDigest
	}
	return ""
}

func (x *FetchMissingRequest) GetMissingRequestHashes() map[uint64]string {
	if x != nil {
		return x.MissingRequestHashes
	}
	return nil
}

type FetchMissingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId            uint64            `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	View                 uint64            `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	SequenceNumber       uint64            `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	BatchDigest          string            `protobuf:"bytes,4,opt,name=batch_digest,json=batchDigest,proto3" json:"batch_digest,omitempty"`
	MissingRequestHashes map[uint64]string `protobuf:"bytes,5,rep,name=missing_request_hashes,json=missingRequestHashes,proto3" json:"missing_request_hashes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MissingRequests      map[uint64][]byte `protobuf:"bytes,6,rep,name=missing_requests,json=missingRequests,proto3" json:"missing_requests,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FetchMissingResponse) Reset() {
	*x = FetchMissingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchMissingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMissingResponse) ProtoMessage() {}

func (x *FetchMissingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMissingResponse.ProtoReflect.Descriptor instead.
func (*FetchMissingResponse) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{20}
}

func (x *FetchMissingResponse) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *FetchMissingResponse) GetView() uint64 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *FetchMissingResponse) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *FetchMissingResponse) GetBatchDigest() string {
	if x != nil {
		return x.BatchDigest
	}
	return ""
}

func (x *FetchMissingResponse) GetMissingRequestHashes() map[uint64]string {
	if x != nil {
		return x.MissingRequestHashes
	}
	return nil
}

func (x *FetchMissingResponse) GetMissingRequests() map[uint64][]byte {
	if x != nil {
		return x.MissingRequests
	}
	return nil
}

type FetchPQCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	H         uint64 `protobuf:"varint,2,opt,name=h,proto3" json:"h,omitempty"`
}

func (x *FetchPQCRequest) Reset() {
	*x = FetchPQCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchPQCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchPQCRequest) ProtoMessage() {}

func (x *FetchPQCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchPQCRequest.ProtoReflect.Descriptor instead.
func (*FetchPQCRequest) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{21}
}

func (x *FetchPQCRequest) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *FetchPQCRequest) GetH() uint64 {
	if x != nil {
		return x.H
	}
	return 0
}

type FetchPQCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId uint64        `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	PrepreSet []*PrePrepare `protobuf:"bytes,2,rep,name=prepre_set,json=prepreSet,proto3" json:"prepre_set,omitempty"`
	PreSet    []*Prepare    `protobuf:"bytes,3,rep,name=pre_set,json=preSet,proto3" json:"pre_set,omitempty"`
	CmtSet    []*Commit     `protobuf:"bytes,4,rep,name=cmt_set,json=cmtSet,proto3" json:"cmt_set,omitempty"`
}

func (x *FetchPQCResponse) Reset() {
	*x = FetchPQCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchPQCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchPQCResponse) ProtoMessage() {}

func (x *FetchPQCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchPQCResponse.ProtoReflect.Descriptor instead.
func (*FetchPQCResponse) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{22}
}

func (x *FetchPQCResponse) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *FetchPQCResponse) GetPrepreSet() []*PrePrepare {
	if x != nil {
		return x.PrepreSet
	}
	return nil
}

func (x *FetchPQCResponse) GetPreSet() []*Prepare {
	if x != nil {
		return x.PreSet
	}
	return nil
}

func (x *FetchPQCResponse) GetCmtSet() []*Commit {
	if x != nil {
		return x.CmtSet
	}
	return nil
}

type SyncState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
}

func (x *SyncState) Reset() {
	*x = SyncState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncState) ProtoMessage() {}

func (x *SyncState) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncState.ProtoReflect.Descriptor instead.
func (*SyncState) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{23}
}

func (x *SyncState) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

type SyncStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicaId        uint64            `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	View             uint64            `protobuf:"varint,2,opt,name=view,proto3" json:"view,omitempty"`
	SignedCheckpoint *SignedCheckpoint `protobuf:"bytes,3,opt,name=signed_checkpoint,json=signedCheckpoint,proto3" json:"signed_checkpoint,omitempty"`
}

func (x *SyncStateResponse) Reset() {
	*x = SyncStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStateResponse) ProtoMessage() {}

func (x *SyncStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStateResponse.ProtoReflect.Descriptor instead.
func (*SyncStateResponse) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{24}
}

func (x *SyncStateResponse) GetReplicaId() uint64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *SyncStateResponse) GetView() uint64 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *SyncStateResponse) GetSignedCheckpoint() *SignedCheckpoint {
	if x != nil {
		return x.SignedCheckpoint
	}
	return nil
}

// EpochChangeRequest is used to get a EpochChangeProof from start_epoch to target_epoch.
type EpochChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Author of the request.
	Author uint64 `protobuf:"varint,1,opt,name=author,proto3" json:"author,omitempty"`
	// The start epoch for the request.
	StartEpoch uint64 `protobuf:"varint,2,opt,name=start_epoch,json=startEpoch,proto3" json:"start_epoch,omitempty"`
	// The target epoch for the request
	TargetEpoch   uint64 `protobuf:"varint,3,opt,name=target_epoch,json=targetEpoch,proto3" json:"target_epoch,omitempty"`
	AuthorAccount string `protobuf:"bytes,4,opt,name=author_account,json=authorAccount,proto3" json:"author_account,omitempty"`
}

func (x *EpochChangeRequest) Reset() {
	*x = EpochChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochChangeRequest) ProtoMessage() {}

func (x *EpochChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochChangeRequest.ProtoReflect.Descriptor instead.
func (*EpochChangeRequest) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{25}
}

func (x *EpochChangeRequest) GetAuthor() uint64 {
	if x != nil {
		return x.Author
	}
	return 0
}

func (x *EpochChangeRequest) GetStartEpoch() uint64 {
	if x != nil {
		return x.StartEpoch
	}
	return 0
}

func (x *EpochChangeRequest) GetTargetEpoch() uint64 {
	if x != nil {
		return x.TargetEpoch
	}
	return 0
}

func (x *EpochChangeRequest) GetAuthorAccount() string {
	if x != nil {
		return x.AuthorAccount
	}
	return ""
}

type Pset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set []*Prepare `protobuf:"bytes,1,rep,name=set,proto3" json:"set,omitempty"`
}

func (x *Pset) Reset() {
	*x = Pset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pset) ProtoMessage() {}

func (x *Pset) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pset.ProtoReflect.Descriptor instead.
func (*Pset) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{26}
}

func (x *Pset) GetSet() []*Prepare {
	if x != nil {
		return x.Set
	}
	return nil
}

type Cset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Set []*Commit `protobuf:"bytes,1,rep,name=set,proto3" json:"set,omitempty"`
}

func (x *Cset) Reset() {
	*x = Cset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cset) ProtoMessage() {}

func (x *Cset) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cset.ProtoReflect.Descriptor instead.
func (*Cset) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{27}
}

func (x *Cset) GetSet() []*Commit {
	if x != nil {
		return x.Set
	}
	return nil
}

type Checkpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch           uint64                   `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	ExecuteState    *Checkpoint_ExecuteState `protobuf:"bytes,2,opt,name=execute_state,json=executeState,proto3" json:"execute_state,omitempty"`
	NeedUpdateEpoch bool                     `protobuf:"varint,3,opt,name=need_update_epoch,json=needUpdateEpoch,proto3" json:"need_update_epoch,omitempty"`
	ViewChange      *ViewChange              `protobuf:"bytes,4,opt,name=view_change,json=viewChange,proto3" json:"view_change,omitempty"`
}

func (x *Checkpoint) Reset() {
	*x = Checkpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checkpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkpoint) ProtoMessage() {}

func (x *Checkpoint) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkpoint.ProtoReflect.Descriptor instead.
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{28}
}

func (x *Checkpoint) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Checkpoint) GetExecuteState() *Checkpoint_ExecuteState {
	if x != nil {
		return x.ExecuteState
	}
	return nil
}

func (x *Checkpoint) GetNeedUpdateEpoch() bool {
	if x != nil {
		return x.NeedUpdateEpoch
	}
	return false
}

func (x *Checkpoint) GetViewChange() *ViewChange {
	if x != nil {
		return x.ViewChange
	}
	return nil
}

// SignedCheckpoint contains the actual checkpoint with signature
type SignedCheckpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Checkpoint is the info of checkpoint.
	Checkpoint *Checkpoint `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	// Author is the signer for signature.
	Author uint64 `protobuf:"varint,2,opt,name=author,proto3" json:"author,omitempty"`
	// Signature is the signature for checkpoint.
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignedCheckpoint) Reset() {
	*x = SignedCheckpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedCheckpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedCheckpoint) ProtoMessage() {}

func (x *SignedCheckpoint) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedCheckpoint.ProtoReflect.Descriptor instead.
func (*SignedCheckpoint) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{29}
}

func (x *SignedCheckpoint) GetCheckpoint() *Checkpoint {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

func (x *SignedCheckpoint) GetAuthor() uint64 {
	if x != nil {
		return x.Author
	}
	return 0
}

func (x *SignedCheckpoint) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// QuorumCheckpoint contains the actual checkpoint with signatures
// by different quorum validators
type QuorumCheckpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Checkpoint is the info of checkpoint.
	Checkpoint *Checkpoint `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	// Signatures is the aggregated signature for checkpoint.
	Signatures map[uint64][]byte `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QuorumCheckpoint) Reset() {
	*x = QuorumCheckpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuorumCheckpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuorumCheckpoint) ProtoMessage() {}

func (x *QuorumCheckpoint) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuorumCheckpoint.ProtoReflect.Descriptor instead.
func (*QuorumCheckpoint) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{30}
}

func (x *QuorumCheckpoint) GetCheckpoint() *Checkpoint {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

func (x *QuorumCheckpoint) GetSignatures() map[uint64][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// EpochChangeProof is a slice of checkpoints with contiguous increasing epoch numbers
// to prove a sequence if epoch changes from the first checkpoint's epoch
type EpochChangeProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochChanges []*EpochChange `protobuf:"bytes,1,rep,name=epoch_changes,json=epochChanges,proto3" json:"epoch_changes,omitempty"`
	// Indicate whether the node where proof comes from has more epoch changes
	More uint64 `protobuf:"varint,2,opt,name=more,proto3" json:"more,omitempty"`
	// Where the proof comes from
	Author uint64 `protobuf:"varint,3,opt,name=author,proto3" json:"author,omitempty"`
	// Help remote check genesis block digest
	GenesisBlockDigest string `protobuf:"bytes,4,opt,name=genesis_block_digest,json=genesisBlockDigest,proto3" json:"genesis_block_digest,omitempty"`
}

func (x *EpochChangeProof) Reset() {
	*x = EpochChangeProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochChangeProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochChangeProof) ProtoMessage() {}

func (x *EpochChangeProof) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochChangeProof.ProtoReflect.Descriptor instead.
func (*EpochChangeProof) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{31}
}

func (x *EpochChangeProof) GetEpochChanges() []*EpochChange {
	if x != nil {
		return x.EpochChanges
	}
	return nil
}

func (x *EpochChangeProof) GetMore() uint64 {
	if x != nil {
		return x.More
	}
	return 0
}

func (x *EpochChangeProof) GetAuthor() uint64 {
	if x != nil {
		return x.Author
	}
	return 0
}

func (x *EpochChangeProof) GetGenesisBlockDigest() string {
	if x != nil {
		return x.GenesisBlockDigest
	}
	return ""
}

type EpochChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The slice of quorum checkpoints
	Checkpoint *QuorumCheckpoint `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	// Help remote node sync from validators
	Validators []string `protobuf:"bytes,2,rep,name=validators,proto3" json:"validators,omitempty"`
	// local node's quorum height
	LowWatermark uint64 `protobuf:"varint,3,opt,name=low_watermark,json=lowWatermark,proto3" json:"low_watermark,omitempty"`
}

func (x *EpochChange) Reset() {
	*x = EpochChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpochChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpochChange) ProtoMessage() {}

func (x *EpochChange) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpochChange.ProtoReflect.Descriptor instead.
func (*EpochChange) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{32}
}

func (x *EpochChange) GetCheckpoint() *QuorumCheckpoint {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

func (x *EpochChange) GetValidators() []string {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *EpochChange) GetLowWatermark() uint64 {
	if x != nil {
		return x.LowWatermark
	}
	return 0
}

// Execute state of the executed block
type Checkpoint_ExecuteState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Digest string `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *Checkpoint_ExecuteState) Reset() {
	*x = Checkpoint_ExecuteState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rbft_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checkpoint_ExecuteState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkpoint_ExecuteState) ProtoMessage() {}

func (x *Checkpoint_ExecuteState) ProtoReflect() protoreflect.Message {
	mi := &file_rbft_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkpoint_ExecuteState.ProtoReflect.Descriptor instead.
func (*Checkpoint_ExecuteState) Descriptor() ([]byte, []int) {
	return file_rbft_proto_rawDescGZIP(), []int{28, 0}
}

func (x *Checkpoint_ExecuteState) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Checkpoint_ExecuteState) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

var File_rbft_proto protoreflect.FileDescriptor

var file_rbft_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x62, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22,
	0x2c, 0x0a, 0x0b, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x22, 0xc0, 0x01,
	0x0a, 0x0a, 0x50, 0x72, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x09, 0x68, 0x61, 0x73, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x22, 0x88, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x06,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x15, 0x52, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x09, 0x48, 0x61,
	0x73, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x1e, 0x64, 0x65, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x64, 0x65, 0x44,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x22, 0x59, 0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8e, 0x01, 0x0a,
	0x0a, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x62,
	0x61, 0x73, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56, 0x63, 0x42, 0x61, 0x73, 0x69, 0x73, 0x52, 0x05,
	0x62, 0x61, 0x73, 0x69, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x22, 0xc5, 0x01,
	0x0a, 0x07, 0x56, 0x63, 0x42, 0x61, 0x73, 0x69, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x0c, 0x0a, 0x01,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x68, 0x12, 0x23, 0x0a, 0x04, 0x70, 0x73,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56, 0x63, 0x50, 0x71, 0x52, 0x04, 0x70, 0x73, 0x65, 0x74, 0x12,
	0x23, 0x0a, 0x04, 0x71, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56, 0x63, 0x50, 0x71, 0x52, 0x04,
	0x71, 0x73, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x04, 0x63, 0x73, 0x65, 0x74, 0x22, 0x66, 0x0a, 0x04, 0x56, 0x63, 0x50, 0x71, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x6b, 0x0a,
	0x10, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x0f, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34,
	0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x76, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x56, 0x69, 0x65, 0x77, 0x22, 0xa3, 0x03, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x65,
	0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x23, 0x0a, 0x04, 0x78, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56,
	0x63, 0x50, 0x71, 0x52, 0x04, 0x78, 0x73, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x51,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0d, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x12, 0x48,
	0x0a, 0x11, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x10, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x54,
	0x65, 0x72, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3e, 0x0a, 0x09, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0xbf, 0x01, 0x0a, 0x10,
	0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x4e,
	0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x4a, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x55, 0x0a,
	0x11, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0xec, 0x01, 0x0a,
	0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2a, 0x0a,
	0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65,
	0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x22, 0xcd, 0x02, 0x0a, 0x13,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x12, 0x6e, 0x0a, 0x16, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x03, 0x0a, 0x14,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x16, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42,
	0x0a, 0x14, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x3e, 0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x50, 0x51, 0x43, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x01, 0x68, 0x22, 0xc0, 0x01, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x50, 0x51, 0x43, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x07,
	0x70, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x52, 0x06, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6d, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63,
	0x6d, 0x74, 0x53, 0x65, 0x74, 0x22, 0x2a, 0x0a, 0x09, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49,
	0x64, 0x22, 0x90, 0x01, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2c,
	0x0a, 0x04, 0x50, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0x2b, 0x0a, 0x04,
	0x43, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x0a, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x47,
	0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x65, 0x64, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0a, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x3e, 0x0a, 0x0c, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x7f, 0x0a, 0x10, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x35, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd5, 0x01, 0x0a,
	0x10, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x01, 0x0a, 0x10, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x3b, 0x0a, 0x0d, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x2e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x6f, 0x77, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x2a, 0xde, 0x03, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x45, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x49, 0x47, 0x4e,
	0x45, 0x44, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x05, 0x12,
	0x14, 0x0a, 0x10, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x51, 0x55, 0x4f, 0x52, 0x55, 0x4d,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x08, 0x12, 0x0c,
	0x0a, 0x08, 0x4e, 0x45, 0x57, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a,
	0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11,
	0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x42, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14,
	0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f,
	0x50, 0x51, 0x43, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0e, 0x12, 0x16, 0x0a,
	0x12, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x51, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x10,
	0x12, 0x1a, 0x0a, 0x16, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x59, 0x4e, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x59, 0x4e, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x10, 0x13, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x50, 0x4f, 0x43, 0x48, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x14, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x50, 0x4f, 0x43, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x4f, 0x46, 0x10, 0x15, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2e, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rbft_proto_rawDescOnce sync.Once
	file_rbft_proto_rawDescData = file_rbft_proto_rawDesc
)

func file_rbft_proto_rawDescGZIP() []byte {
	file_rbft_proto_rawDescOnce.Do(func() {
		file_rbft_proto_rawDescData = protoimpl.X.CompressGZIP(file_rbft_proto_rawDescData)
	})
	return file_rbft_proto_rawDescData
}

var file_rbft_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rbft_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_rbft_proto_goTypes = []interface{}{
	(Type)(0),                       // 0: consensus.Type
	(*ConsensusMessage)(nil),        // 1: consensus.ConsensusMessage
	(*NullRequest)(nil),             // 2: consensus.NullRequest
	(*PrePrepare)(nil),              // 3: consensus.PrePrepare
	(*Prepare)(nil),                 // 4: consensus.Prepare
	(*Commit)(nil),                  // 5: consensus.Commit
	(*ReBroadcastRequestSet)(nil),   // 6: consensus.ReBroadcastRequestSet
	(*HashBatch)(nil),               // 7: consensus.HashBatch
	(*FetchCheckpoint)(nil),         // 8: consensus.FetchCheckpoint
	(*ViewChange)(nil),              // 9: consensus.ViewChange
	(*VcBasis)(nil),                 // 10: consensus.VcBasis
	(*VcPq)(nil),                    // 11: consensus.VcPq
	(*QuorumViewChange)(nil),        // 12: consensus.QuorumViewChange
	(*NodeDynamicInfo)(nil),         // 13: consensus.NodeDynamicInfo
	(*NewView)(nil),                 // 14: consensus.NewView
	(*FetchView)(nil),               // 15: consensus.FetchView
	(*RecoveryResponse)(nil),        // 16: consensus.RecoveryResponse
	(*FetchBatchRequest)(nil),       // 17: consensus.FetchBatchRequest
	(*FetchBatchResponse)(nil),      // 18: consensus.FetchBatchResponse
	(*RequestBatch)(nil),            // 19: consensus.RequestBatch
	(*FetchMissingRequest)(nil),     // 20: consensus.FetchMissingRequest
	(*FetchMissingResponse)(nil),    // 21: consensus.FetchMissingResponse
	(*FetchPQCRequest)(nil),         // 22: consensus.FetchPQCRequest
	(*FetchPQCResponse)(nil),        // 23: consensus.FetchPQCResponse
	(*SyncState)(nil),               // 24: consensus.SyncState
	(*SyncStateResponse)(nil),       // 25: consensus.SyncStateResponse
	(*EpochChangeRequest)(nil),      // 26: consensus.EpochChangeRequest
	(*Pset)(nil),                    // 27: consensus.Pset
	(*Cset)(nil),                    // 28: consensus.Cset
	(*Checkpoint)(nil),              // 29: consensus.Checkpoint
	(*SignedCheckpoint)(nil),        // 30: consensus.SignedCheckpoint
	(*QuorumCheckpoint)(nil),        // 31: consensus.QuorumCheckpoint
	(*EpochChangeProof)(nil),        // 32: consensus.EpochChangeProof
	(*EpochChange)(nil),             // 33: consensus.EpochChange
	nil,                             // 34: consensus.FetchMissingRequest.MissingRequestHashesEntry
	nil,                             // 35: consensus.FetchMissingResponse.MissingRequestHashesEntry
	nil,                             // 36: consensus.FetchMissingResponse.MissingRequestsEntry
	(*Checkpoint_ExecuteState)(nil), // 37: consensus.Checkpoint.ExecuteState
	nil,                             // 38: consensus.QuorumCheckpoint.SignaturesEntry
}
var file_rbft_proto_depIdxs = []int32{
	0,  // 0: consensus.ConsensusMessage.type:type_name -> consensus.Type
	7,  // 1: consensus.PrePrepare.hash_batch:type_name -> consensus.HashBatch
	10, // 2: consensus.ViewChange.basis:type_name -> consensus.VcBasis
	11, // 3: consensus.VcBasis.pset:type_name -> consensus.VcPq
	11, // 4: consensus.VcBasis.qset:type_name -> consensus.VcPq
	30, // 5: consensus.VcBasis.cset:type_name -> consensus.SignedCheckpoint
	9,  // 6: consensus.QuorumViewChange.view_changes:type_name -> consensus.ViewChange
	11, // 7: consensus.NewView.xset:type_name -> consensus.VcPq
	12, // 8: consensus.NewView.view_change_set:type_name -> consensus.QuorumViewChange
	31, // 9: consensus.NewView.quorum_checkpoint:type_name -> consensus.QuorumCheckpoint
	13, // 10: consensus.NewView.validator_dynamic_info:type_name -> consensus.NodeDynamicInfo
	14, // 11: consensus.RecoveryResponse.new_view:type_name -> consensus.NewView
	30, // 12: consensus.RecoveryResponse.initial_checkpoint:type_name -> consensus.SignedCheckpoint
	19, // 13: consensus.FetchBatchResponse.batch:type_name -> consensus.RequestBatch
	34, // 14: consensus.FetchMissingRequest.missing_request_hashes:type_name -> consensus.FetchMissingRequest.MissingRequestHashesEntry
	35, // 15: consensus.FetchMissingResponse.missing_request_hashes:type_name -> consensus.FetchMissingResponse.MissingRequestHashesEntry
	36, // 16: consensus.FetchMissingResponse.missing_requests:type_name -> consensus.FetchMissingResponse.MissingRequestsEntry
	3,  // 17: consensus.FetchPQCResponse.prepre_set:type_name -> consensus.PrePrepare
	4,  // 18: consensus.FetchPQCResponse.pre_set:type_name -> consensus.Prepare
	5,  // 19: consensus.FetchPQCResponse.cmt_set:type_name -> consensus.Commit
	30, // 20: consensus.SyncStateResponse.signed_checkpoint:type_name -> consensus.SignedCheckpoint
	4,  // 21: consensus.Pset.set:type_name -> consensus.Prepare
	5,  // 22: consensus.Cset.set:type_name -> consensus.Commit
	37, // 23: consensus.Checkpoint.execute_state:type_name -> consensus.Checkpoint.ExecuteState
	9,  // 24: consensus.Checkpoint.view_change:type_name -> consensus.ViewChange
	29, // 25: consensus.SignedCheckpoint.checkpoint:type_name -> consensus.Checkpoint
	29, // 26: consensus.QuorumCheckpoint.checkpoint:type_name -> consensus.Checkpoint
	38, // 27: consensus.QuorumCheckpoint.signatures:type_name -> consensus.QuorumCheckpoint.SignaturesEntry
	33, // 28: consensus.EpochChangeProof.epoch_changes:type_name -> consensus.EpochChange
	31, // 29: consensus.EpochChange.checkpoint:type_name -> consensus.QuorumCheckpoint
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_rbft_proto_init() }
func file_rbft_proto_init() {
	if File_rbft_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rbft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrePrepare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prepare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReBroadcastRequestSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchCheckpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VcBasis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VcPq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuorumViewChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDynamicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchMissingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchMissingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchPQCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchPQCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checkpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedCheckpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuorumCheckpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochChangeProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpochChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rbft_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checkpoint_ExecuteState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rbft_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rbft_proto_goTypes,
		DependencyIndexes: file_rbft_proto_depIdxs,
		EnumInfos:         file_rbft_proto_enumTypes,
		MessageInfos:      file_rbft_proto_msgTypes,
	}.Build()
	File_rbft_proto = out.File
	file_rbft_proto_rawDesc = nil
	file_rbft_proto_goTypes = nil
	file_rbft_proto_depIdxs = nil
}
