// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fltTransaction.proto

package consensus

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FltTransaction_TxType int32

const (
	FltTransaction_NTX              FltTransaction_TxType = 0
	FltTransaction_CTX              FltTransaction_TxType = 1
	FltTransaction_CROSSCHAINTX     FltTransaction_TxType = 2
	FltTransaction_ANCHORTX         FltTransaction_TxType = 3
	FltTransaction_CROSSCHAINTXAUTO FltTransaction_TxType = 4
	FltTransaction_ANCHORTXAUTO     FltTransaction_TxType = 5
	FltTransaction_TIMEOUTTX        FltTransaction_TxType = 6
)

var FltTransaction_TxType_name = map[int32]string{
	0: "NTX",
	1: "CTX",
	2: "CROSSCHAINTX",
	3: "ANCHORTX",
	4: "CROSSCHAINTXAUTO",
	5: "ANCHORTXAUTO",
	6: "TIMEOUTTX",
}

var FltTransaction_TxType_value = map[string]int32{
	"NTX":              0,
	"CTX":              1,
	"CROSSCHAINTX":     2,
	"ANCHORTX":         3,
	"CROSSCHAINTXAUTO": 4,
	"ANCHORTXAUTO":     5,
	"TIMEOUTTX":        6,
}

func (x FltTransaction_TxType) String() string {
	return proto.EnumName(FltTransaction_TxType_name, int32(x))
}

func (FltTransaction_TxType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_263892c7a68fe3a6, []int{0, 0}
}

type InvalidTransactionRecord_ErrType int32

const (
	InvalidTransactionRecord_OUTOFBALANCE           InvalidTransactionRecord_ErrType = 0
	InvalidTransactionRecord_SIGFAILED              InvalidTransactionRecord_ErrType = 1
	InvalidTransactionRecord_INVOKE_CONTRACT_FAILED InvalidTransactionRecord_ErrType = 2
	InvalidTransactionRecord_DEPLOY_CONTRACT_FAILED InvalidTransactionRecord_ErrType = 3
	InvalidTransactionRecord_INVALID_PERMISSION     InvalidTransactionRecord_ErrType = 4
	InvalidTransactionRecord_DID_INVOCATION_FAILED  InvalidTransactionRecord_ErrType = 5
	InvalidTransactionRecord_EXEC_KVSQL_FAILED      InvalidTransactionRecord_ErrType = 6
	InvalidTransactionRecord_OUTOFGAS               InvalidTransactionRecord_ErrType = 7
)

var InvalidTransactionRecord_ErrType_name = map[int32]string{
	0: "OUTOFBALANCE",
	1: "SIGFAILED",
	2: "INVOKE_CONTRACT_FAILED",
	3: "DEPLOY_CONTRACT_FAILED",
	4: "INVALID_PERMISSION",
	5: "DID_INVOCATION_FAILED",
	6: "EXEC_KVSQL_FAILED",
	7: "OUTOFGAS",
}

var InvalidTransactionRecord_ErrType_value = map[string]int32{
	"OUTOFBALANCE":           0,
	"SIGFAILED":              1,
	"INVOKE_CONTRACT_FAILED": 2,
	"DEPLOY_CONTRACT_FAILED": 3,
	"INVALID_PERMISSION":     4,
	"DID_INVOCATION_FAILED":  5,
	"EXEC_KVSQL_FAILED":      6,
	"OUTOFGAS":               7,
}

func (x InvalidTransactionRecord_ErrType) String() string {
	return proto.EnumName(InvalidTransactionRecord_ErrType_name, int32(x))
}

func (InvalidTransactionRecord_ErrType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_263892c7a68fe3a6, []int{2, 0}
}

type TransactionValue_Opcode int32

const (
	TransactionValue_NORMAL                 TransactionValue_Opcode = 0
	TransactionValue_UPDATE                 TransactionValue_Opcode = 1
	TransactionValue_FREEZE                 TransactionValue_Opcode = 2
	TransactionValue_UNFREEZE               TransactionValue_Opcode = 3
	TransactionValue_SKIPVM                 TransactionValue_Opcode = 4
	TransactionValue_DESTROY                TransactionValue_Opcode = 5
	TransactionValue_ARCHIVE                TransactionValue_Opcode = 100
	TransactionValue_DID_REGISTER           TransactionValue_Opcode = 200
	TransactionValue_DID_FREEZE             TransactionValue_Opcode = 201
	TransactionValue_DID_UNFREEZE           TransactionValue_Opcode = 202
	TransactionValue_DID_ABANDON            TransactionValue_Opcode = 203
	TransactionValue_DID_UPDATEPUBLICKEY    TransactionValue_Opcode = 204
	TransactionValue_DID_UPDATEADMINS       TransactionValue_Opcode = 205
	TransactionValue_DIDCREDENTIAL_UPLOAD   TransactionValue_Opcode = 206
	TransactionValue_DIDCREDENTIAL_DOWNLOAD TransactionValue_Opcode = 207
	TransactionValue_DIDCREDENTIAL_ABANDON  TransactionValue_Opcode = 208
	TransactionValue_DID_SETEXTRA           TransactionValue_Opcode = 209
	TransactionValue_DID_GETEXTRA           TransactionValue_Opcode = 210
)

var TransactionValue_Opcode_name = map[int32]string{
	0:   "NORMAL",
	1:   "UPDATE",
	2:   "FREEZE",
	3:   "UNFREEZE",
	4:   "SKIPVM",
	5:   "DESTROY",
	100: "ARCHIVE",
	200: "DID_REGISTER",
	201: "DID_FREEZE",
	202: "DID_UNFREEZE",
	203: "DID_ABANDON",
	204: "DID_UPDATEPUBLICKEY",
	205: "DID_UPDATEADMINS",
	206: "DIDCREDENTIAL_UPLOAD",
	207: "DIDCREDENTIAL_DOWNLOAD",
	208: "DIDCREDENTIAL_ABANDON",
	209: "DID_SETEXTRA",
	210: "DID_GETEXTRA",
}

var TransactionValue_Opcode_value = map[string]int32{
	"NORMAL":                 0,
	"UPDATE":                 1,
	"FREEZE":                 2,
	"UNFREEZE":               3,
	"SKIPVM":                 4,
	"DESTROY":                5,
	"ARCHIVE":                100,
	"DID_REGISTER":           200,
	"DID_FREEZE":             201,
	"DID_UNFREEZE":           202,
	"DID_ABANDON":            203,
	"DID_UPDATEPUBLICKEY":    204,
	"DID_UPDATEADMINS":       205,
	"DIDCREDENTIAL_UPLOAD":   206,
	"DIDCREDENTIAL_DOWNLOAD": 207,
	"DIDCREDENTIAL_ABANDON":  208,
	"DID_SETEXTRA":           209,
	"DID_GETEXTRA":           210,
}

func (x TransactionValue_Opcode) String() string {
	return proto.EnumName(TransactionValue_Opcode_name, int32(x))
}

func (TransactionValue_Opcode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_263892c7a68fe3a6, []int{6, 0}
}

type TransactionValue_VmType int32

const (
	TransactionValue_EVM      TransactionValue_VmType = 0
	TransactionValue_JVM      TransactionValue_VmType = 1
	TransactionValue_HVM      TransactionValue_VmType = 2
	TransactionValue_BVM      TransactionValue_VmType = 3
	TransactionValue_TRANSFER TransactionValue_VmType = 4
	TransactionValue_KVSQL    TransactionValue_VmType = 5
	TransactionValue_FVM      TransactionValue_VmType = 6
)

var TransactionValue_VmType_name = map[int32]string{
	0: "EVM",
	1: "JVM",
	2: "HVM",
	3: "BVM",
	4: "TRANSFER",
	5: "KVSQL",
	6: "FVM",
}

var TransactionValue_VmType_value = map[string]int32{
	"EVM":      0,
	"JVM":      1,
	"HVM":      2,
	"BVM":      3,
	"TRANSFER": 4,
	"KVSQL":    5,
	"FVM":      6,
}

func (x TransactionValue_VmType) String() string {
	return proto.EnumName(TransactionValue_VmType_name, int32(x))
}

func (TransactionValue_VmType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_263892c7a68fe3a6, []int{6, 1}
}

type FltTransaction struct {
	Version             []byte                `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	From                []byte                `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To                  []byte                `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Value               []byte                `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp           int64                 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature           []byte                `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	Id                  uint64                `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	TransactionHash     []byte                `protobuf:"bytes,8,opt,name=transactionHash,proto3" json:"transactionHash,omitempty"`
	Nonce               int64                 `protobuf:"varint,9,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Other               *NonHash              `protobuf:"bytes,10,opt,name=other,proto3" json:"other,omitempty"`
	TxType              FltTransaction_TxType `protobuf:"varint,11,opt,name=txType,proto3,enum=consensus.FltTransaction_TxType" json:"txType,omitempty"`
	CName               []byte                `protobuf:"bytes,12,opt,name=cName,proto3" json:"cName,omitempty"`
	ExpirationTimestamp int64                 `protobuf:"varint,13,opt,name=expiration_timestamp,json=expirationTimestamp,proto3" json:"expiration_timestamp,omitempty"`
	Participant         *Participant          `protobuf:"bytes,14,opt,name=participant,proto3" json:"participant,omitempty"`
}

func (m *FltTransaction) Reset()         { *m = FltTransaction{} }
func (m *FltTransaction) String() string { return proto.CompactTextString(m) }
func (*FltTransaction) ProtoMessage()    {}
func (*FltTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_263892c7a68fe3a6, []int{0}
}
func (m *FltTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FltTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FltTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FltTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FltTransaction.Merge(m, src)
}
func (m *FltTransaction) XXX_Size() int {
	return m.Size()
}
func (m *FltTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_FltTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_FltTransaction proto.InternalMessageInfo

type Participant struct {
	Initiator   []byte   `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	Withholding [][]byte `protobuf:"bytes,2,rep,name=withholding,proto3" json:"withholding,omitempty"`
}

func (m *Participant) Reset()         { *m = Participant{} }
func (m *Participant) String() string { return proto.CompactTextString(m) }
func (*Participant) ProtoMessage()    {}
func (*Participant) Descriptor() ([]byte, []int) {
	return fileDescriptor_263892c7a68fe3a6, []int{1}
}
func (m *Participant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Participant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Participant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Participant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Participant.Merge(m, src)
}
func (m *Participant) XXX_Size() int {
	return m.Size()
}
func (m *Participant) XXX_DiscardUnknown() {
	xxx_messageInfo_Participant.DiscardUnknown(m)
}

var xxx_messageInfo_Participant proto.InternalMessageInfo

func (m *Participant) GetInitiator() []byte {
	if m != nil {
		return m.Initiator
	}
	return nil
}

func (m *Participant) GetWithholding() [][]byte {
	if m != nil {
		return m.Withholding
	}
	return nil
}

type InvalidTransactionRecord struct {
	Tx      *FltTransaction                  `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	ErrType InvalidTransactionRecord_ErrType `protobuf:"varint,2,opt,name=errType,proto3,enum=consensus.InvalidTransactionRecord_ErrType" json:"errType,omitempty"`
	ErrMsg  []byte                           `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	Index   uint64                           `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *InvalidTransactionRecord) Reset()         { *m = InvalidTransactionRecord{} }
func (m *InvalidTransactionRecord) String() string { return proto.CompactTextString(m) }
func (*InvalidTransactionRecord) ProtoMessage()    {}
func (*InvalidTransactionRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_263892c7a68fe3a6, []int{2}
}
func (m *InvalidTransactionRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvalidTransactionRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvalidTransactionRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvalidTransactionRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidTransactionRecord.Merge(m, src)
}
func (m *InvalidTransactionRecord) XXX_Size() int {
	return m.Size()
}
func (m *InvalidTransactionRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidTransactionRecord.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidTransactionRecord proto.InternalMessageInfo

func (m *InvalidTransactionRecord) GetTx() *FltTransaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *InvalidTransactionRecord) GetErrType() InvalidTransactionRecord_ErrType {
	if m != nil {
		return m.ErrType
	}
	return InvalidTransactionRecord_OUTOFBALANCE
}

func (m *InvalidTransactionRecord) GetErrMsg() []byte {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *InvalidTransactionRecord) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type InvalidTransactionRecords struct {
	Records []*InvalidTransactionRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *InvalidTransactionRecords) Reset()         { *m = InvalidTransactionRecords{} }
func (m *InvalidTransactionRecords) String() string { return proto.CompactTextString(m) }
func (*InvalidTransactionRecords) ProtoMessage()    {}
func (*InvalidTransactionRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_263892c7a68fe3a6, []int{3}
}
func (m *InvalidTransactionRecords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvalidTransactionRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvalidTransactionRecords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvalidTransactionRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvalidTransactionRecords.Merge(m, src)
}
func (m *InvalidTransactionRecords) XXX_Size() int {
	return m.Size()
}
func (m *InvalidTransactionRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_InvalidTransactionRecords.DiscardUnknown(m)
}

var xxx_messageInfo_InvalidTransactionRecords proto.InternalMessageInfo

func (m *InvalidTransactionRecords) GetRecords() []*InvalidTransactionRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type TransactionMeta struct {
	BlockIndex uint64 `protobuf:"varint,1,opt,name=BlockIndex,proto3" json:"BlockIndex,omitempty"`
	Index      int64  `protobuf:"varint,2,opt,name=Index,proto3" json:"Index,omitempty"`
	Version    uint64 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Invalid    bool   `protobuf:"varint,4,opt,name=Invalid,proto3" json:"Invalid,omitempty"`
}

func (m *TransactionMeta) Reset()         { *m = TransactionMeta{} }
func (m *TransactionMeta) String() string { return proto.CompactTextString(m) }
func (*TransactionMeta) ProtoMessage()    {}
func (*TransactionMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_263892c7a68fe3a6, []int{4}
}
func (m *TransactionMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionMeta.Merge(m, src)
}
func (m *TransactionMeta) XXX_Size() int {
	return m.Size()
}
func (m *TransactionMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionMeta.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionMeta proto.InternalMessageInfo

func (m *TransactionMeta) GetBlockIndex() uint64 {
	if m != nil {
		return m.BlockIndex
	}
	return 0
}

func (m *TransactionMeta) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TransactionMeta) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TransactionMeta) GetInvalid() bool {
	if m != nil {
		return m.Invalid
	}
	return false
}

type TransactionWrapper struct {
	TransactionVersion []byte `protobuf:"bytes,1,opt,name=transactionVersion,proto3" json:"transactionVersion,omitempty"`
	Transaction        []byte `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (m *TransactionWrapper) Reset()         { *m = TransactionWrapper{} }
func (m *TransactionWrapper) String() string { return proto.CompactTextString(m) }
func (*TransactionWrapper) ProtoMessage()    {}
func (*TransactionWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_263892c7a68fe3a6, []int{5}
}
func (m *TransactionWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionWrapper.Merge(m, src)
}
func (m *TransactionWrapper) XXX_Size() int {
	return m.Size()
}
func (m *TransactionWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionWrapper proto.InternalMessageInfo

func (m *TransactionWrapper) GetTransactionVersion() []byte {
	if m != nil {
		return m.TransactionVersion
	}
	return nil
}

func (m *TransactionWrapper) GetTransaction() []byte {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type TransactionValue struct {
	Price              int64                   `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
	GasLimit           int64                   `protobuf:"varint,2,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	Amount             int64                   `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Payload            []byte                  `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	EncryptedAmount    []byte                  `protobuf:"bytes,5,opt,name=encryptedAmount,proto3" json:"encryptedAmount,omitempty"`
	HomomorphicAmount  []byte                  `protobuf:"bytes,6,opt,name=homomorphicAmount,proto3" json:"homomorphicAmount,omitempty"`
	HomomorphicBalance []byte                  `protobuf:"bytes,7,opt,name=homomorphicBalance,proto3" json:"homomorphicBalance,omitempty"`
	Op                 TransactionValue_Opcode `protobuf:"varint,8,opt,name=op,proto3,enum=consensus.TransactionValue_Opcode" json:"op,omitempty"`
	Extra              []byte                  `protobuf:"bytes,9,opt,name=extra,proto3" json:"extra,omitempty"`
	ExtraId            []byte                  `protobuf:"bytes,10,opt,name=extraId,proto3" json:"extraId,omitempty"`
	VmType             TransactionValue_VmType `protobuf:"varint,11,opt,name=vmType,proto3,enum=consensus.TransactionValue_VmType" json:"vmType,omitempty"`
}

func (m *TransactionValue) Reset()         { *m = TransactionValue{} }
func (m *TransactionValue) String() string { return proto.CompactTextString(m) }
func (*TransactionValue) ProtoMessage()    {}
func (*TransactionValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_263892c7a68fe3a6, []int{6}
}
func (m *TransactionValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionValue.Merge(m, src)
}
func (m *TransactionValue) XXX_Size() int {
	return m.Size()
}
func (m *TransactionValue) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionValue.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionValue proto.InternalMessageInfo

func (m *TransactionValue) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TransactionValue) GetGasLimit() int64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *TransactionValue) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransactionValue) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *TransactionValue) GetEncryptedAmount() []byte {
	if m != nil {
		return m.EncryptedAmount
	}
	return nil
}

func (m *TransactionValue) GetHomomorphicAmount() []byte {
	if m != nil {
		return m.HomomorphicAmount
	}
	return nil
}

func (m *TransactionValue) GetHomomorphicBalance() []byte {
	if m != nil {
		return m.HomomorphicBalance
	}
	return nil
}

func (m *TransactionValue) GetOp() TransactionValue_Opcode {
	if m != nil {
		return m.Op
	}
	return TransactionValue_NORMAL
}

func (m *TransactionValue) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *TransactionValue) GetExtraId() []byte {
	if m != nil {
		return m.ExtraId
	}
	return nil
}

func (m *TransactionValue) GetVmType() TransactionValue_VmType {
	if m != nil {
		return m.VmType
	}
	return TransactionValue_EVM
}

type InvokeArgs struct {
	Code       []byte   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	MethodName string   `protobuf:"bytes,2,opt,name=methodName,proto3" json:"methodName,omitempty"`
	Args       [][]byte `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *InvokeArgs) Reset()         { *m = InvokeArgs{} }
func (m *InvokeArgs) String() string { return proto.CompactTextString(m) }
func (*InvokeArgs) ProtoMessage()    {}
func (*InvokeArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_263892c7a68fe3a6, []int{7}
}
func (m *InvokeArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvokeArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvokeArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvokeArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvokeArgs.Merge(m, src)
}
func (m *InvokeArgs) XXX_Size() int {
	return m.Size()
}
func (m *InvokeArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_InvokeArgs.DiscardUnknown(m)
}

var xxx_messageInfo_InvokeArgs proto.InternalMessageInfo

func (m *InvokeArgs) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *InvokeArgs) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func (m *InvokeArgs) GetArgs() [][]byte {
	if m != nil {
		return m.Args
	}
	return nil
}

type NonHash struct {
	NodeHash      []byte   `protobuf:"bytes,1,opt,name=nodeHash,proto3" json:"nodeHash,omitempty"`
	PrivateTxHash []byte   `protobuf:"bytes,2,opt,name=privateTxHash,proto3" json:"privateTxHash,omitempty"`
	Collection    []string `protobuf:"bytes,3,rep,name=collection,proto3" json:"collection,omitempty"`
	Nonce         uint64   `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *NonHash) Reset()         { *m = NonHash{} }
func (m *NonHash) String() string { return proto.CompactTextString(m) }
func (*NonHash) ProtoMessage()    {}
func (*NonHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_263892c7a68fe3a6, []int{8}
}
func (m *NonHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NonHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NonHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NonHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NonHash.Merge(m, src)
}
func (m *NonHash) XXX_Size() int {
	return m.Size()
}
func (m *NonHash) XXX_DiscardUnknown() {
	xxx_messageInfo_NonHash.DiscardUnknown(m)
}

var xxx_messageInfo_NonHash proto.InternalMessageInfo

func (m *NonHash) GetNodeHash() []byte {
	if m != nil {
		return m.NodeHash
	}
	return nil
}

func (m *NonHash) GetPrivateTxHash() []byte {
	if m != nil {
		return m.PrivateTxHash
	}
	return nil
}

func (m *NonHash) GetCollection() []string {
	if m != nil {
		return m.Collection
	}
	return nil
}

func (m *NonHash) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func init() {
	proto.RegisterEnum("consensus.FltTransaction_TxType", FltTransaction_TxType_name, FltTransaction_TxType_value)
	proto.RegisterEnum("consensus.InvalidTransactionRecord_ErrType", InvalidTransactionRecord_ErrType_name, InvalidTransactionRecord_ErrType_value)
	proto.RegisterEnum("consensus.TransactionValue_Opcode", TransactionValue_Opcode_name, TransactionValue_Opcode_value)
	proto.RegisterEnum("consensus.TransactionValue_VmType", TransactionValue_VmType_name, TransactionValue_VmType_value)
	proto.RegisterType((*FltTransaction)(nil), "consensus.FltTransaction")
	proto.RegisterType((*Participant)(nil), "consensus.Participant")
	proto.RegisterType((*InvalidTransactionRecord)(nil), "consensus.InvalidTransactionRecord")
	proto.RegisterType((*InvalidTransactionRecords)(nil), "consensus.InvalidTransactionRecords")
	proto.RegisterType((*TransactionMeta)(nil), "consensus.TransactionMeta")
	proto.RegisterType((*TransactionWrapper)(nil), "consensus.TransactionWrapper")
	proto.RegisterType((*TransactionValue)(nil), "consensus.TransactionValue")
	proto.RegisterType((*InvokeArgs)(nil), "consensus.InvokeArgs")
	proto.RegisterType((*NonHash)(nil), "consensus.NonHash")
}

func init() { proto.RegisterFile("fltTransaction.proto", fileDescriptor_263892c7a68fe3a6) }

var fileDescriptor_263892c7a68fe3a6 = []byte{
	// 1322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x4f, 0x73, 0xdb, 0x44,
	0x14, 0x8f, 0xe4, 0x7f, 0xf1, 0xb3, 0x9b, 0x6e, 0xb7, 0x49, 0x46, 0x29, 0x8c, 0xf1, 0x08, 0x0e,
	0x66, 0x00, 0x77, 0x08, 0x97, 0x4e, 0x67, 0x38, 0xc8, 0x96, 0x92, 0x88, 0xd8, 0x92, 0x59, 0xcb,
	0x6e, 0xda, 0x8b, 0x47, 0xb5, 0x15, 0x5b, 0x53, 0x5b, 0x2b, 0x24, 0x25, 0xb8, 0xc3, 0x89, 0x1b,
	0x47, 0x3e, 0x02, 0x9f, 0x83, 0x3b, 0x33, 0xe5, 0x7f, 0x60, 0x38, 0x70, 0x64, 0xda, 0x0f, 0xc1,
	0x95, 0xd9, 0x5d, 0xd9, 0x56, 0x5a, 0xca, 0x70, 0x7b, 0xef, 0xf7, 0xde, 0xdb, 0xf7, 0xf4, 0xdb,
	0xdd, 0xdf, 0x0a, 0x76, 0xcf, 0xe7, 0x89, 0x13, 0xb9, 0x41, 0xec, 0x8e, 0x13, 0x9f, 0x06, 0xcd,
	0x30, 0xa2, 0x09, 0xc5, 0xe5, 0x31, 0x0d, 0x62, 0x2f, 0x88, 0x2f, 0xe2, 0x3b, 0x1f, 0x4c, 0xfd,
	0x64, 0x76, 0xf1, 0xb8, 0x39, 0xa6, 0x8b, 0xbb, 0x53, 0x3a, 0xa5, 0x77, 0x79, 0xc6, 0xe3, 0x8b,
	0x73, 0xee, 0x71, 0x87, 0x5b, 0xa2, 0x52, 0xbd, 0xca, 0xc3, 0xce, 0xd1, 0xb5, 0x25, 0xb1, 0x02,
	0xa5, 0x4b, 0x2f, 0x8a, 0x7d, 0x1a, 0x28, 0x52, 0x5d, 0x6a, 0x54, 0xc9, 0xca, 0xc5, 0x18, 0xf2,
	0xe7, 0x11, 0x5d, 0x28, 0x32, 0x87, 0xb9, 0x8d, 0x77, 0x40, 0x4e, 0xa8, 0x92, 0xe3, 0x88, 0x9c,
	0x50, 0xbc, 0x0b, 0x85, 0x4b, 0x77, 0x7e, 0xe1, 0x29, 0x79, 0x0e, 0x09, 0x07, 0xbf, 0x09, 0xe5,
	0xc4, 0x5f, 0x78, 0x71, 0xe2, 0x2e, 0x42, 0xa5, 0x50, 0x97, 0x1a, 0x39, 0xb2, 0x01, 0x58, 0x34,
	0xf6, 0xa7, 0x81, 0x9b, 0x5c, 0x44, 0x9e, 0x52, 0xe4, 0x75, 0x1b, 0x80, 0x75, 0xf0, 0x27, 0x4a,
	0xa9, 0x2e, 0x35, 0xf2, 0x44, 0xf6, 0x27, 0xb8, 0x01, 0x37, 0x93, 0xcd, 0xb8, 0x27, 0x6e, 0x3c,
	0x53, 0xb6, 0x79, 0xcd, 0xcb, 0x30, 0x9b, 0x25, 0xa0, 0xc1, 0xd8, 0x53, 0xca, 0xbc, 0xa3, 0x70,
	0x70, 0x03, 0x0a, 0x34, 0x99, 0x79, 0x91, 0x02, 0x75, 0xa9, 0x51, 0x39, 0xc4, 0xcd, 0x35, 0x79,
	0x4d, 0x4b, 0x14, 0x12, 0x91, 0x80, 0xef, 0x41, 0x31, 0x59, 0x3a, 0x4f, 0x43, 0x4f, 0xa9, 0xd4,
	0xa5, 0xc6, 0xce, 0x61, 0x3d, 0x93, 0x7a, 0x9d, 0xb4, 0xa6, 0xc3, 0xf3, 0x48, 0x9a, 0xcf, 0x3a,
	0x8f, 0x2d, 0x77, 0xe1, 0x29, 0x55, 0xc1, 0x02, 0x77, 0xf0, 0x87, 0xb0, 0xeb, 0x2d, 0x43, 0x3f,
	0x72, 0x59, 0xc9, 0x68, 0x43, 0xc8, 0x0d, 0x3e, 0xde, 0xed, 0x4d, 0xcc, 0x59, 0x53, 0x73, 0x0f,
	0x2a, 0xa1, 0x1b, 0x25, 0xfe, 0xd8, 0x0f, 0xdd, 0x20, 0x51, 0x76, 0xf8, 0xc8, 0xfb, 0x99, 0x39,
	0x7a, 0x9b, 0x28, 0xc9, 0xa6, 0xaa, 0x9f, 0x41, 0x51, 0x0c, 0x85, 0x4b, 0x90, 0xb3, 0x9c, 0x33,
	0xb4, 0xc5, 0x8c, 0xb6, 0x73, 0x86, 0x24, 0x8c, 0xa0, 0xda, 0x26, 0x76, 0xbf, 0xdf, 0x3e, 0xd1,
	0x4c, 0x16, 0x92, 0x71, 0x15, 0xb6, 0x35, 0xab, 0x7d, 0x62, 0x13, 0xe7, 0x0c, 0xe5, 0xf0, 0x2e,
	0xa0, 0x6c, 0x5c, 0x1b, 0x38, 0x36, 0xca, 0xb3, 0xaa, 0x55, 0x0e, 0x47, 0x0a, 0xf8, 0x06, 0x94,
	0x1d, 0xb3, 0x6b, 0xd8, 0x03, 0xc7, 0x39, 0x43, 0xc5, 0xfb, 0xf9, 0xaf, 0xbe, 0x79, 0x6b, 0x4b,
	0xed, 0x42, 0x25, 0x33, 0x14, 0xdb, 0x5c, 0x3f, 0xf0, 0x13, 0xdf, 0x4d, 0x68, 0x94, 0x1e, 0xa8,
	0x0d, 0x80, 0xeb, 0x50, 0xf9, 0xdc, 0x4f, 0x66, 0x33, 0x3a, 0x9f, 0xf8, 0xc1, 0x54, 0x91, 0xeb,
	0xb9, 0x46, 0x95, 0x64, 0x21, 0xf5, 0x6f, 0x19, 0x14, 0x33, 0xb8, 0x74, 0xe7, 0xfe, 0x24, 0x43,
	0x38, 0xf1, 0xc6, 0x34, 0x9a, 0xe0, 0x77, 0x41, 0x4e, 0x96, 0x7c, 0xd5, 0xca, 0xe1, 0xc1, 0x6b,
	0x77, 0x87, 0xc8, 0xc9, 0x12, 0x1b, 0x50, 0xf2, 0xa2, 0x88, 0xef, 0xa6, 0xcc, 0x77, 0xf3, 0xbd,
	0x4c, 0xfe, 0xeb, 0x1a, 0x34, 0x0d, 0x51, 0x42, 0x56, 0xb5, 0x78, 0x1f, 0x8a, 0x5e, 0x14, 0x75,
	0xe3, 0x69, 0x7a, 0xe6, 0x53, 0x8f, 0xed, 0xb8, 0x1f, 0x4c, 0xbc, 0x25, 0x3f, 0xf7, 0x79, 0x22,
	0x1c, 0xf5, 0x5b, 0x09, 0x4a, 0xe9, 0x12, 0x8c, 0x3e, 0x7b, 0xe0, 0xd8, 0x47, 0x2d, 0xad, 0xa3,
	0x59, 0x6d, 0x03, 0x6d, 0x31, 0xfa, 0xfa, 0xe6, 0xf1, 0x91, 0x66, 0x76, 0x0c, 0x1d, 0x49, 0xf8,
	0x0e, 0xec, 0x9b, 0xd6, 0xd0, 0x3e, 0x35, 0x46, 0x6d, 0xdb, 0x72, 0x88, 0xd6, 0x76, 0x46, 0x69,
	0x4c, 0x66, 0x31, 0xdd, 0xe8, 0x75, 0xec, 0x87, 0xaf, 0xc4, 0x72, 0x78, 0x1f, 0xb0, 0x69, 0x0d,
	0xb5, 0x8e, 0xa9, 0x8f, 0x7a, 0x06, 0xe9, 0x9a, 0xfd, 0xbe, 0x69, 0x5b, 0x28, 0x8f, 0x0f, 0x60,
	0x4f, 0x37, 0xf5, 0x11, 0x5b, 0xb3, 0xad, 0x39, 0xa6, 0x6d, 0xad, 0x4a, 0x0a, 0x78, 0x0f, 0x6e,
	0x19, 0x67, 0x46, 0x7b, 0x74, 0x3a, 0xec, 0x7f, 0xda, 0x59, 0xc1, 0x45, 0x76, 0x0a, 0xf8, 0x88,
	0xc7, 0x5a, 0x1f, 0x95, 0xd4, 0x47, 0x70, 0xf0, 0x3a, 0x5e, 0x62, 0xfc, 0x31, 0x94, 0x22, 0x61,
	0x2a, 0x52, 0x3d, 0xd7, 0xa8, 0x1c, 0xbe, 0xfd, 0x3f, 0xe8, 0x24, 0xab, 0x1a, 0xf5, 0x0b, 0xb8,
	0x99, 0x89, 0x76, 0xbd, 0xc4, 0xc5, 0x35, 0x80, 0xd6, 0x9c, 0x8e, 0x9f, 0x98, 0x9c, 0x46, 0x89,
	0xd3, 0x98, 0x41, 0x18, 0xc3, 0x22, 0x24, 0x8b, 0xdb, 0x2c, 0xd0, 0x8c, 0x5a, 0xe5, 0x78, 0xc9,
	0x5a, 0xad, 0x14, 0x28, 0xa5, 0x73, 0xf0, 0x3d, 0xd9, 0x26, 0x2b, 0x57, 0x3d, 0x07, 0x9c, 0x69,
	0xfe, 0x20, 0x72, 0xc3, 0xd0, 0x8b, 0x70, 0x13, 0x70, 0x46, 0x40, 0x86, 0xd7, 0x24, 0xf0, 0x5f,
	0x22, 0xec, 0xe8, 0x66, 0xd0, 0x54, 0x14, 0xb3, 0x90, 0xfa, 0x5d, 0x11, 0x50, 0xa6, 0xd1, 0x90,
	0x4b, 0xe1, 0x2e, 0x14, 0xc2, 0xc8, 0x1f, 0x7b, 0x7c, 0xe5, 0x1c, 0x11, 0x0e, 0xbe, 0x03, 0xdb,
	0x53, 0x37, 0xee, 0xf8, 0x0b, 0x3f, 0x49, 0xbf, 0x6f, 0xed, 0xb3, 0x23, 0xe7, 0x2e, 0xe8, 0x45,
	0x90, 0xf0, 0x2f, 0xcc, 0x91, 0xd4, 0x63, 0x1f, 0x18, 0xba, 0x4f, 0xe7, 0xd4, 0x9d, 0xa4, 0x62,
	0xbb, 0x72, 0x99, 0x44, 0x7a, 0xc1, 0x38, 0x7a, 0x1a, 0x26, 0xde, 0x44, 0x13, 0xa5, 0x05, 0x21,
	0x91, 0x2f, 0xc1, 0xf8, 0x7d, 0xb8, 0x35, 0xa3, 0x0b, 0xba, 0xa0, 0x51, 0x38, 0xf3, 0xc7, 0x69,
	0xae, 0x90, 0xe0, 0x57, 0x03, 0x8c, 0xa2, 0x0c, 0xd8, 0x72, 0xe7, 0x2e, 0x53, 0xd7, 0x92, 0xa0,
	0xe8, 0xd5, 0x08, 0x3e, 0x04, 0x99, 0x86, 0x5c, 0x9d, 0x77, 0x0e, 0xd5, 0xcc, 0xf9, 0x78, 0x99,
	0x94, 0xa6, 0x1d, 0x8e, 0xe9, 0xc4, 0x23, 0x32, 0x0d, 0x19, 0x3f, 0xde, 0x32, 0x89, 0x5c, 0x2e,
	0xda, 0x55, 0x22, 0x1c, 0xf6, 0xad, 0xdc, 0x30, 0x27, 0x5c, 0xb6, 0xab, 0x64, 0xe5, 0xe2, 0xfb,
	0x50, 0xbc, 0x5c, 0x64, 0x44, 0xfa, 0x3f, 0xfb, 0x0c, 0x17, 0x42, 0xa6, 0x45, 0x85, 0xfa, 0x87,
	0x0c, 0x45, 0xd1, 0x1a, 0x03, 0x14, 0x2d, 0x9b, 0x74, 0xb5, 0x0e, 0xda, 0x62, 0xf6, 0xa0, 0xa7,
	0x6b, 0x8e, 0x81, 0x24, 0x66, 0x1f, 0x11, 0xc3, 0x78, 0x64, 0x08, 0x91, 0x1c, 0x58, 0xa9, 0x97,
	0x63, 0x91, 0xfe, 0xa9, 0xd9, 0x1b, 0x76, 0x51, 0x1e, 0x57, 0xa0, 0xa4, 0x1b, 0x7d, 0x87, 0xd8,
	0x0f, 0x51, 0x81, 0x39, 0x1a, 0x69, 0x9f, 0x98, 0x43, 0x03, 0x4d, 0xf0, 0x2d, 0xa8, 0xb2, 0x4b,
	0x48, 0x8c, 0x63, 0xb3, 0xef, 0x18, 0x04, 0x3d, 0x93, 0xf0, 0x4d, 0x00, 0x06, 0xa5, 0x0b, 0x7d,
	0x2f, 0xad, 0x72, 0xd6, 0x6b, 0xff, 0xc0, 0x14, 0xba, 0xc2, 0x20, 0xad, 0xa5, 0x59, 0xba, 0x6d,
	0xa1, 0x1f, 0x25, 0xac, 0xc0, 0x6d, 0x9e, 0xc4, 0x07, 0xeb, 0x0d, 0x5a, 0x1d, 0xb3, 0x7d, 0x6a,
	0x3c, 0x44, 0x3f, 0x49, 0x78, 0x0f, 0xd0, 0x26, 0xa2, 0xe9, 0x5d, 0xd3, 0xea, 0xa3, 0x9f, 0x25,
	0x7c, 0x00, 0xbb, 0xba, 0xa9, 0xb7, 0x89, 0xa1, 0x1b, 0x96, 0x63, 0x6a, 0x9d, 0xd1, 0xa0, 0xd7,
	0xb1, 0x35, 0x1d, 0xfd, 0x22, 0xe1, 0x37, 0x60, 0xff, 0x7a, 0x48, 0xb7, 0x1f, 0x58, 0x3c, 0xf8,
	0x2b, 0x93, 0xa1, 0xbd, 0xeb, 0xc1, 0xd5, 0x10, 0x57, 0xeb, 0x49, 0xfb, 0x86, 0x63, 0x9c, 0x39,
	0x44, 0x43, 0xbf, 0xad, 0xa1, 0xe3, 0x15, 0xf4, 0xbb, 0xa4, 0x5a, 0x50, 0x14, 0x44, 0xb3, 0x17,
	0xc7, 0x18, 0x76, 0xc5, 0xd3, 0xf3, 0xc9, 0xb0, 0x8b, 0x24, 0x66, 0x9c, 0x0c, 0xbb, 0x48, 0x66,
	0x46, 0x6b, 0xd8, 0x45, 0x39, 0xc6, 0xaa, 0x43, 0x34, 0xab, 0x7f, 0x64, 0x10, 0x94, 0xc7, 0x65,
	0x28, 0x70, 0x51, 0x42, 0x05, 0x96, 0x71, 0x34, 0xec, 0xa2, 0xa2, 0xea, 0x00, 0x98, 0xc1, 0x25,
	0x7d, 0xe2, 0x69, 0xd1, 0x34, 0x66, 0x7f, 0x21, 0x6c, 0xc7, 0xd2, 0x9b, 0xc9, 0x6d, 0xa6, 0x1d,
	0x0b, 0x2f, 0x99, 0xd1, 0x09, 0x7f, 0x74, 0xd9, 0x05, 0x2a, 0x93, 0x0c, 0xc2, 0x6a, 0xdc, 0x68,
	0x1a, 0x2b, 0x39, 0xfe, 0xbe, 0x70, 0x5b, 0xfd, 0x52, 0x82, 0x52, 0xfa, 0xe0, 0xb3, 0xeb, 0x17,
	0xd0, 0x89, 0xc7, 0x7f, 0x26, 0xc4, 0xba, 0x6b, 0x1f, 0xbf, 0x03, 0x37, 0xc2, 0xc8, 0xbf, 0x74,
	0x13, 0xcf, 0x59, 0xf2, 0x04, 0x71, 0xd3, 0xaf, 0x83, 0x6c, 0x82, 0x31, 0x9d, 0xcf, 0x3d, 0x21,
	0x06, 0xac, 0x4f, 0x99, 0x64, 0x90, 0xcd, 0xbf, 0x48, 0xfa, 0x3e, 0x70, 0xa7, 0xa5, 0x3c, 0x7b,
	0x5e, 0x93, 0xae, 0x9e, 0xd7, 0xa4, 0xbf, 0x9e, 0xd7, 0xa4, 0xaf, 0x5f, 0xd4, 0xb6, 0xae, 0x5e,
	0xd4, 0xb6, 0xfe, 0x7c, 0x51, 0xdb, 0x7a, 0x5c, 0xe4, 0xff, 0x67, 0x1f, 0xfd, 0x13, 0x00, 0x00,
	0xff, 0xff, 0x7c, 0x79, 0xe1, 0x00, 0xf1, 0x09, 0x00, 0x00,
}

func (m *FltTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FltTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FltTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Participant != nil {
		{
			size, err := m.Participant.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFltTransaction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.ExpirationTimestamp != 0 {
		i = encodeVarintFltTransaction(dAtA, i, uint64(m.ExpirationTimestamp))
		i--
		dAtA[i] = 0x68
	}
	if len(m.CName) > 0 {
		i -= len(m.CName)
		copy(dAtA[i:], m.CName)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.CName)))
		i--
		dAtA[i] = 0x62
	}
	if m.TxType != 0 {
		i = encodeVarintFltTransaction(dAtA, i, uint64(m.TxType))
		i--
		dAtA[i] = 0x58
	}
	if m.Other != nil {
		{
			size, err := m.Other.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFltTransaction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Nonce != 0 {
		i = encodeVarintFltTransaction(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x48
	}
	if len(m.TransactionHash) > 0 {
		i -= len(m.TransactionHash)
		copy(dAtA[i:], m.TransactionHash)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.TransactionHash)))
		i--
		dAtA[i] = 0x42
	}
	if m.Id != 0 {
		i = encodeVarintFltTransaction(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if m.Timestamp != 0 {
		i = encodeVarintFltTransaction(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Participant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Participant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Participant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Withholding) > 0 {
		for iNdEx := len(m.Withholding) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Withholding[iNdEx])
			copy(dAtA[i:], m.Withholding[iNdEx])
			i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.Withholding[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Initiator) > 0 {
		i -= len(m.Initiator)
		copy(dAtA[i:], m.Initiator)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.Initiator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvalidTransactionRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidTransactionRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvalidTransactionRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintFltTransaction(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ErrMsg) > 0 {
		i -= len(m.ErrMsg)
		copy(dAtA[i:], m.ErrMsg)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.ErrMsg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ErrType != 0 {
		i = encodeVarintFltTransaction(dAtA, i, uint64(m.ErrType))
		i--
		dAtA[i] = 0x10
	}
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFltTransaction(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvalidTransactionRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvalidTransactionRecords) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvalidTransactionRecords) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFltTransaction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TransactionMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Invalid {
		i--
		if m.Invalid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Version != 0 {
		i = encodeVarintFltTransaction(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintFltTransaction(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.BlockIndex != 0 {
		i = encodeVarintFltTransaction(dAtA, i, uint64(m.BlockIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransactionWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Transaction) > 0 {
		i -= len(m.Transaction)
		copy(dAtA[i:], m.Transaction)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.Transaction)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TransactionVersion) > 0 {
		i -= len(m.TransactionVersion)
		copy(dAtA[i:], m.TransactionVersion)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.TransactionVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransactionValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VmType != 0 {
		i = encodeVarintFltTransaction(dAtA, i, uint64(m.VmType))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ExtraId) > 0 {
		i -= len(m.ExtraId)
		copy(dAtA[i:], m.ExtraId)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.ExtraId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Op != 0 {
		i = encodeVarintFltTransaction(dAtA, i, uint64(m.Op))
		i--
		dAtA[i] = 0x40
	}
	if len(m.HomomorphicBalance) > 0 {
		i -= len(m.HomomorphicBalance)
		copy(dAtA[i:], m.HomomorphicBalance)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.HomomorphicBalance)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.HomomorphicAmount) > 0 {
		i -= len(m.HomomorphicAmount)
		copy(dAtA[i:], m.HomomorphicAmount)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.HomomorphicAmount)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EncryptedAmount) > 0 {
		i -= len(m.EncryptedAmount)
		copy(dAtA[i:], m.EncryptedAmount)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.EncryptedAmount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x22
	}
	if m.Amount != 0 {
		i = encodeVarintFltTransaction(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.GasLimit != 0 {
		i = encodeVarintFltTransaction(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x10
	}
	if m.Price != 0 {
		i = encodeVarintFltTransaction(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InvokeArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvokeArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvokeArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Args[iNdEx])
			copy(dAtA[i:], m.Args[iNdEx])
			i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.Args[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MethodName) > 0 {
		i -= len(m.MethodName)
		copy(dAtA[i:], m.MethodName)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.MethodName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NonHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NonHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NonHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintFltTransaction(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Collection) > 0 {
		for iNdEx := len(m.Collection) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Collection[iNdEx])
			copy(dAtA[i:], m.Collection[iNdEx])
			i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.Collection[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PrivateTxHash) > 0 {
		i -= len(m.PrivateTxHash)
		copy(dAtA[i:], m.PrivateTxHash)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.PrivateTxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeHash) > 0 {
		i -= len(m.NodeHash)
		copy(dAtA[i:], m.NodeHash)
		i = encodeVarintFltTransaction(dAtA, i, uint64(len(m.NodeHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFltTransaction(dAtA []byte, offset int, v uint64) int {
	offset -= sovFltTransaction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FltTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovFltTransaction(uint64(m.Timestamp))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovFltTransaction(uint64(m.Id))
	}
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovFltTransaction(uint64(m.Nonce))
	}
	if m.Other != nil {
		l = m.Other.Size()
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	if m.TxType != 0 {
		n += 1 + sovFltTransaction(uint64(m.TxType))
	}
	l = len(m.CName)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	if m.ExpirationTimestamp != 0 {
		n += 1 + sovFltTransaction(uint64(m.ExpirationTimestamp))
	}
	if m.Participant != nil {
		l = m.Participant.Size()
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	return n
}

func (m *Participant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Initiator)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	if len(m.Withholding) > 0 {
		for _, b := range m.Withholding {
			l = len(b)
			n += 1 + l + sovFltTransaction(uint64(l))
		}
	}
	return n
}

func (m *InvalidTransactionRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	if m.ErrType != 0 {
		n += 1 + sovFltTransaction(uint64(m.ErrType))
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovFltTransaction(uint64(m.Index))
	}
	return n
}

func (m *InvalidTransactionRecords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovFltTransaction(uint64(l))
		}
	}
	return n
}

func (m *TransactionMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockIndex != 0 {
		n += 1 + sovFltTransaction(uint64(m.BlockIndex))
	}
	if m.Index != 0 {
		n += 1 + sovFltTransaction(uint64(m.Index))
	}
	if m.Version != 0 {
		n += 1 + sovFltTransaction(uint64(m.Version))
	}
	if m.Invalid {
		n += 2
	}
	return n
}

func (m *TransactionWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransactionVersion)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	l = len(m.Transaction)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	return n
}

func (m *TransactionValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Price != 0 {
		n += 1 + sovFltTransaction(uint64(m.Price))
	}
	if m.GasLimit != 0 {
		n += 1 + sovFltTransaction(uint64(m.GasLimit))
	}
	if m.Amount != 0 {
		n += 1 + sovFltTransaction(uint64(m.Amount))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	l = len(m.EncryptedAmount)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	l = len(m.HomomorphicAmount)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	l = len(m.HomomorphicBalance)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	if m.Op != 0 {
		n += 1 + sovFltTransaction(uint64(m.Op))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	l = len(m.ExtraId)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	if m.VmType != 0 {
		n += 1 + sovFltTransaction(uint64(m.VmType))
	}
	return n
}

func (m *InvokeArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	l = len(m.MethodName)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, b := range m.Args {
			l = len(b)
			n += 1 + l + sovFltTransaction(uint64(l))
		}
	}
	return n
}

func (m *NonHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeHash)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	l = len(m.PrivateTxHash)
	if l > 0 {
		n += 1 + l + sovFltTransaction(uint64(l))
	}
	if len(m.Collection) > 0 {
		for _, s := range m.Collection {
			l = len(s)
			n += 1 + l + sovFltTransaction(uint64(l))
		}
	}
	if m.Nonce != 0 {
		n += 1 + sovFltTransaction(uint64(m.Nonce))
	}
	return n
}

func sovFltTransaction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFltTransaction(x uint64) (n int) {
	return sovFltTransaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FltTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFltTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FltTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FltTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = append(m.Version[:0], dAtA[iNdEx:postIndex]...)
			if m.Version == nil {
				m.Version = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From[:0], dAtA[iNdEx:postIndex]...)
			if m.From == nil {
				m.From = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = append(m.To[:0], dAtA[iNdEx:postIndex]...)
			if m.To == nil {
				m.To = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = append(m.TransactionHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TransactionHash == nil {
				m.TransactionHash = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Other", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Other == nil {
				m.Other = &NonHash{}
			}
			if err := m.Other.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			m.TxType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxType |= FltTransaction_TxType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CName = append(m.CName[:0], dAtA[iNdEx:postIndex]...)
			if m.CName == nil {
				m.CName = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			m.ExpirationTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participant == nil {
				m.Participant = &Participant{}
			}
			if err := m.Participant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFltTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Participant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFltTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Participant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Participant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Initiator = append(m.Initiator[:0], dAtA[iNdEx:postIndex]...)
			if m.Initiator == nil {
				m.Initiator = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withholding", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withholding = append(m.Withholding, make([]byte, postIndex-iNdEx))
			copy(m.Withholding[len(m.Withholding)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFltTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidTransactionRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFltTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidTransactionRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidTransactionRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &FltTransaction{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrType", wireType)
			}
			m.ErrType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrType |= InvalidTransactionRecord_ErrType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = append(m.ErrMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.ErrMsg == nil {
				m.ErrMsg = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFltTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvalidTransactionRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFltTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvalidTransactionRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvalidTransactionRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &InvalidTransactionRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFltTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFltTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockIndex", wireType)
			}
			m.BlockIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invalid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Invalid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFltTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFltTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionVersion", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionVersion = append(m.TransactionVersion[:0], dAtA[iNdEx:postIndex]...)
			if m.TransactionVersion == nil {
				m.TransactionVersion = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transaction = append(m.Transaction[:0], dAtA[iNdEx:postIndex]...)
			if m.Transaction == nil {
				m.Transaction = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFltTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFltTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedAmount = append(m.EncryptedAmount[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedAmount == nil {
				m.EncryptedAmount = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomomorphicAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomomorphicAmount = append(m.HomomorphicAmount[:0], dAtA[iNdEx:postIndex]...)
			if m.HomomorphicAmount == nil {
				m.HomomorphicAmount = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomomorphicBalance", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomomorphicBalance = append(m.HomomorphicBalance[:0], dAtA[iNdEx:postIndex]...)
			if m.HomomorphicBalance == nil {
				m.HomomorphicBalance = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= TransactionValue_Opcode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraId = append(m.ExtraId[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraId == nil {
				m.ExtraId = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmType", wireType)
			}
			m.VmType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VmType |= TransactionValue_VmType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFltTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvokeArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFltTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvokeArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvokeArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = append(m.Code[:0], dAtA[iNdEx:postIndex]...)
			if m.Code == nil {
				m.Code = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, make([]byte, postIndex-iNdEx))
			copy(m.Args[len(m.Args)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFltTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NonHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFltTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NonHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NonHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeHash = append(m.NodeHash[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeHash == nil {
				m.NodeHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateTxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateTxHash = append(m.PrivateTxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PrivateTxHash == nil {
				m.PrivateTxHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFltTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collection = append(m.Collection, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFltTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFltTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFltTransaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFltTransaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFltTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFltTransaction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFltTransaction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFltTransaction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFltTransaction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFltTransaction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFltTransaction = fmt.Errorf("proto: unexpected end of group")
)
