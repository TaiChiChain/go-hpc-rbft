// Copyright 2016-2017 Hyperchain Corp.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/ultramesh/flato-event/inner/protos/transaction.proto";

package rbftpb;

enum Type {
    NULL_REQUEST = 0;
    PRE_PREPARE = 1;
    PREPARE = 2;
    COMMIT = 3;
    CHECKPOINT = 4;
    VIEW_CHANGE = 5;
    NEW_VIEW = 6;
    FETCH_REQUEST_BATCH = 7;
    SEND_REQUEST_BATCH = 8;
    RECOVERY_FETCH_QPC = 9;
    RECOVERY_RETURN_QPC = 10;
    READY_FOR_N = 11;
    AGREE_UPDATE_N = 12;
    UPDATE_N = 13;
    FETCH_MISSING_REQUESTS = 14;
    SEND_MISSING_REQUESTS = 15;
    SYNC_STATE = 16;
    SYNC_STATE_RESPONSE = 17;
    NOTIFICATION = 18;
    NOTIFICATION_RESPONSE = 19;
    CONF_CHANGE = 20;
    REQUEST_SET = 21;
    EPOCH_CHECK = 22;
    EPOCH_CHECK_RESPONSE = 23;
    EPOCH_SYNC = 24;
    UPDATE_ADD_OFFER = 25;
}

message nvp_state_update_request{
    bytes node_hash = 1;
}

message consensus_message {
    Type type = 1;
    uint64 from = 2;
    uint64 to = 3;
    uint64 epoch = 4;
    bytes payload = 5;
}

message request_batch {
    repeated string request_hash_list = 1;
    repeated protos.Transaction request_list = 2;
    int64 timestamp = 3;
    uint64 seq_no = 4;
    repeated bool local_list = 5;
    string batch_hash = 6;
}

message hash_batch {
    repeated string request_hash_list = 1;
    repeated string de_duplicate_request_hash_list = 2;
    int64 timestamp = 3;
}

message send_request_batch {
    uint64 replica_id = 1;
    request_batch batch = 2;
    string batch_digest = 3;
}

message fetch_missing_requests {
    uint64 replica_id = 1;
    uint64 view = 2;
    uint64 sequence_number = 3;
    string batch_digest = 4;
    map<uint64, string> missing_request_hashes = 5;
}

message send_missing_requests {
    uint64 replica_id = 1;
    uint64 view = 2;
    uint64 sequence_number = 3;
    string batch_digest = 4;
    map<uint64, string> missing_request_hashes = 5;
    map<uint64, protos.Transaction> missing_requests = 6;
}

message request_set {
    repeated protos.Transaction requests = 1;
    bool local = 2;
}

message null_request {
    uint64 replica_id = 1;
}

message pre_prepare {
    uint64 replica_id = 1;
    uint64 view = 2;
    uint64 sequence_number = 3;
    string batch_digest = 4;
    hash_batch hash_batch = 5;
}

message prepare {
    uint64 replica_id = 1;
    uint64 view = 2;
    uint64 sequence_number = 3;
    string batch_digest = 4;
}

message commit {
    uint64 replica_id = 1;
    uint64 view = 2;
    uint64 sequence_number = 3;
    string batch_digest = 4;
    uint64 epoch = 5;
}

message checkpoint {
     uint64 replica_id = 1;
     uint64 sequence_number = 2;
     string digest = 3;
}

message vc_C {
    uint64 sequence_number = 1;
    string digest = 2;
}

message vc_PQ {
    uint64 sequence_number = 1;
    string batch_digest = 2;
    uint64 view = 3;
}

message vc_basis {
    uint64   replica_id = 1;
    uint64   view = 2;
    uint64   h = 3;
    repeated vc_C cset = 4;
    repeated vc_PQ pset = 5;
    repeated vc_PQ qset = 6;
}

message view_change {
    vc_basis basis = 1;
    bytes    signature = 2;
    int64    timestamp = 3;
}

message new_view {
    uint64 replica_id = 1;
    uint64 view = 2;
    map<uint64, string> xset = 3;
    repeated vc_basis bset = 4;
}

message fetch_request_batch {
    uint64 replica_id = 1;
    string batch_digest = 2;
}

message recovery_fetchPQC {
    uint64 replica_id = 1;
    uint64 h = 2;
}

message recovery_returnPQC {
    uint64   replica_id = 1;
    repeated pre_prepare prepre_set = 2;
    repeated prepare pre_set = 3;
    repeated commit cmt_set = 4;
}

message Pset {
    repeated prepare set = 1;
}

message Cset {
    repeated commit set = 1;
}

message epoch_start_state {
    uint64 applied = 1;
    string digest = 2;
}

message node_info {
    uint64 replica_id = 1;
    string replica_hash = 2;
}

message sync_state {
    node_info node_info = 1;
    uint64 epoch = 2;
}

message sync_state_response {
    node_info node_info = 1;
    uint64 epoch = 2;
    uint64 view = 3;
    uint64 applied = 4;
    string digest = 5;
    string routerInfo = 6;
}

// notification message
message notification {
    vc_basis basis = 1;
    bytes    signature = 2;
    int64    timestamp = 3;
    uint64   replica_id = 4;
}

message notification_response {
    vc_basis  basis = 1;
    uint64    n = 2;
    uint64    epoch = 3;
    node_info node_info = 4;
}

message peer {
    uint64 id = 1;
    string hash = 2;
    string hostname = 3;
}

message router {
    repeated peer peers = 1;
}

enum conf_change_type {
    ConfChangeUpdateNode = 0;
}

message conf_change {
    uint64 NodeID = 1;
    conf_change_type type = 2;
    bytes context = 3;
    map<uint64,bool> verified_replica = 4;
}

message conf_state {
    router quorum_router = 1;
}

message service_state {
    uint64 applied = 1;
    string digest = 2;
    map<uint64, string> v_set = 3;
}

message epoch_check {
    uint64 replica_id = 1;
    string replica_hash = 2;
}

message epoch_check_response {
    string replica_hash = 1;
    uint64 epoch = 2;
}

enum inform_type {
    FilterFinishRecovery = 0;
    FilterFinishViewChange = 1;
    FilterFinishUpdateN = 2;
    FilterFinishStateUpdate = 3;
    FilterPoolFull = 4;
    FilterStableCheckpoint = 5;
}
