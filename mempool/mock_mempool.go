// Code generated by MockGen. DO NOT EDIT.
// Source: ./mempool.go

// Package mempool is a generated GoMock package.
package mempool

import (
	reflect "reflect"

	consensus "github.com/axiomesh/axiom-bft/common/consensus"
	gomock "github.com/golang/mock/gomock"
)

// MockMemPool is a mock of MemPool interface.
type MockMemPool[T any, Constraint consensus.TXConstraint[T]] struct {
	ctrl     *gomock.Controller
	recorder *MockMemPoolMockRecorder[T, Constraint]
}

// MockMemPoolMockRecorder is the mock recorder for MockMemPool.
type MockMemPoolMockRecorder[T any, Constraint consensus.TXConstraint[T]] struct {
	mock *MockMemPool[T, Constraint]
}

// NewMockMemPool creates a new mock instance.
func NewMockMemPool[T any, Constraint consensus.TXConstraint[T]](ctrl *gomock.Controller) *MockMemPool[T, Constraint] {
	mock := &MockMemPool[T, Constraint]{ctrl: ctrl}
	mock.recorder = &MockMemPoolMockRecorder[T, Constraint]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemPool[T, Constraint]) EXPECT() *MockMemPoolMockRecorder[T, Constraint] {
	return m.recorder
}

// AddNewRequests mocks base method.
func (m *MockMemPool[T, Constraint]) AddNewRequests(txs [][]byte, isPrimary, local, isReplace bool) ([]*RequestHashBatch[T, Constraint], []string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewRequests", txs, isPrimary, local, isReplace)
	ret0, _ := ret[0].([]*RequestHashBatch[T, Constraint])
	ret1, _ := ret[1].([]string)
	return ret0, ret1
}

// AddNewRequests indicates an expected call of AddNewRequests.
func (mr *MockMemPoolMockRecorder[T, Constraint]) AddNewRequests(txs, isPrimary, local, isReplace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewRequests", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).AddNewRequests), txs, isPrimary, local, isReplace)
}

// FilterOutOfDateRequests mocks base method.
func (m *MockMemPool[T, Constraint]) FilterOutOfDateRequests() ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterOutOfDateRequests")
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOutOfDateRequests indicates an expected call of FilterOutOfDateRequests.
func (mr *MockMemPoolMockRecorder[T, Constraint]) FilterOutOfDateRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOutOfDateRequests", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).FilterOutOfDateRequests))
}

// GenerateRequestBatch mocks base method.
func (m *MockMemPool[T, Constraint]) GenerateRequestBatch() []*RequestHashBatch[T, Constraint] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRequestBatch")
	ret0, _ := ret[0].([]*RequestHashBatch[T, Constraint])
	return ret0
}

// GenerateRequestBatch indicates an expected call of GenerateRequestBatch.
func (mr *MockMemPoolMockRecorder[T, Constraint]) GenerateRequestBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRequestBatch", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).GenerateRequestBatch))
}

// GetPendingNonceByAccount mocks base method.
func (m *MockMemPool[T, Constraint]) GetPendingNonceByAccount(account string) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingNonceByAccount", account)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetPendingNonceByAccount indicates an expected call of GetPendingNonceByAccount.
func (mr *MockMemPoolMockRecorder[T, Constraint]) GetPendingNonceByAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingNonceByAccount", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).GetPendingNonceByAccount), account)
}

// GetPendingTxByHash mocks base method.
func (m *MockMemPool[T, Constraint]) GetPendingTxByHash(hash string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingTxByHash", hash)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetPendingTxByHash indicates an expected call of GetPendingTxByHash.
func (mr *MockMemPoolMockRecorder[T, Constraint]) GetPendingTxByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingTxByHash", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).GetPendingTxByHash), hash)
}

// GetRequestsByHashList mocks base method.
func (m *MockMemPool[T, Constraint]) GetRequestsByHashList(batchHash string, timestamp int64, hashList, deDuplicateTxHashes []string) ([][]byte, []bool, map[uint64]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsByHashList", batchHash, timestamp, hashList, deDuplicateTxHashes)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].([]bool)
	ret2, _ := ret[2].(map[uint64]string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetRequestsByHashList indicates an expected call of GetRequestsByHashList.
func (mr *MockMemPoolMockRecorder[T, Constraint]) GetRequestsByHashList(batchHash, timestamp, hashList, deDuplicateTxHashes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsByHashList", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).GetRequestsByHashList), batchHash, timestamp, hashList, deDuplicateTxHashes)
}

// GetUncommittedTransactions mocks base method.
func (m *MockMemPool[T, Constraint]) GetUncommittedTransactions(maxsize uint64) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUncommittedTransactions", maxsize)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetUncommittedTransactions indicates an expected call of GetUncommittedTransactions.
func (mr *MockMemPoolMockRecorder[T, Constraint]) GetUncommittedTransactions(maxsize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncommittedTransactions", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).GetUncommittedTransactions), maxsize)
}

// HasPendingRequestInPool mocks base method.
func (m *MockMemPool[T, Constraint]) HasPendingRequestInPool() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPendingRequestInPool")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasPendingRequestInPool indicates an expected call of HasPendingRequestInPool.
func (mr *MockMemPoolMockRecorder[T, Constraint]) HasPendingRequestInPool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPendingRequestInPool", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).HasPendingRequestInPool))
}

// IsPoolFull mocks base method.
func (m *MockMemPool[T, Constraint]) IsPoolFull() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPoolFull")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPoolFull indicates an expected call of IsPoolFull.
func (mr *MockMemPoolMockRecorder[T, Constraint]) IsPoolFull() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPoolFull", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).IsPoolFull))
}

// ReConstructBatchByOrder mocks base method.
func (m *MockMemPool[T, Constraint]) ReConstructBatchByOrder(oldBatch *RequestHashBatch[T, Constraint]) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReConstructBatchByOrder", oldBatch)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReConstructBatchByOrder indicates an expected call of ReConstructBatchByOrder.
func (mr *MockMemPoolMockRecorder[T, Constraint]) ReConstructBatchByOrder(oldBatch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReConstructBatchByOrder", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).ReConstructBatchByOrder), oldBatch)
}

// ReceiveMissingRequests mocks base method.
func (m *MockMemPool[T, Constraint]) ReceiveMissingRequests(batchHash string, txs map[uint64][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveMissingRequests", batchHash, txs)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReceiveMissingRequests indicates an expected call of ReceiveMissingRequests.
func (mr *MockMemPoolMockRecorder[T, Constraint]) ReceiveMissingRequests(batchHash, txs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMissingRequests", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).ReceiveMissingRequests), batchHash, txs)
}

// RemoveBatches mocks base method.
func (m *MockMemPool[T, Constraint]) RemoveBatches(hashList []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveBatches", hashList)
}

// RemoveBatches indicates an expected call of RemoveBatches.
func (mr *MockMemPoolMockRecorder[T, Constraint]) RemoveBatches(hashList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBatches", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).RemoveBatches), hashList)
}

// RemoveTimeoutRequests mocks base method.
func (m *MockMemPool[T, Constraint]) RemoveTimeoutRequests() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTimeoutRequests")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTimeoutRequests indicates an expected call of RemoveTimeoutRequests.
func (mr *MockMemPoolMockRecorder[T, Constraint]) RemoveTimeoutRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTimeoutRequests", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).RemoveTimeoutRequests))
}

// Reset mocks base method.
func (m *MockMemPool[T, Constraint]) Reset(saveBatches []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", saveBatches)
}

// Reset indicates an expected call of Reset.
func (mr *MockMemPoolMockRecorder[T, Constraint]) Reset(saveBatches interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).Reset), saveBatches)
}

// RestoreOneBatch mocks base method.
func (m *MockMemPool[T, Constraint]) RestoreOneBatch(hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreOneBatch", hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreOneBatch indicates an expected call of RestoreOneBatch.
func (mr *MockMemPoolMockRecorder[T, Constraint]) RestoreOneBatch(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreOneBatch", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).RestoreOneBatch), hash)
}

// RestorePool mocks base method.
func (m *MockMemPool[T, Constraint]) RestorePool() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RestorePool")
}

// RestorePool indicates an expected call of RestorePool.
func (mr *MockMemPoolMockRecorder[T, Constraint]) RestorePool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestorePool", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).RestorePool))
}

// SendMissingRequests mocks base method.
func (m *MockMemPool[T, Constraint]) SendMissingRequests(batchHash string, missingHashList map[uint64]string) (map[uint64][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMissingRequests", batchHash, missingHashList)
	ret0, _ := ret[0].(map[uint64][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMissingRequests indicates an expected call of SendMissingRequests.
func (mr *MockMemPoolMockRecorder[T, Constraint]) SendMissingRequests(batchHash, missingHashList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMissingRequests", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).SendMissingRequests), batchHash, missingHashList)
}

// Start mocks base method.
func (m *MockMemPool[T, Constraint]) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockMemPoolMockRecorder[T, Constraint]) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).Start))
}

// Stop mocks base method.
func (m *MockMemPool[T, Constraint]) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockMemPoolMockRecorder[T, Constraint]) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMemPool[T, Constraint])(nil).Stop))
}

// MockExternal is a mock of External interface.
type MockExternal struct {
	ctrl     *gomock.Controller
	recorder *MockExternalMockRecorder
}

// MockExternalMockRecorder is the mock recorder for MockExternal.
type MockExternalMockRecorder struct {
	mock *MockExternal
}

// NewMockExternal creates a new mock instance.
func NewMockExternal(ctrl *gomock.Controller) *MockExternal {
	mock := &MockExternal{ctrl: ctrl}
	mock.recorder = &MockExternalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternal) EXPECT() *MockExternalMockRecorder {
	return m.recorder
}

// GetPendingNonceByAccount mocks base method.
func (m *MockExternal) GetPendingNonceByAccount(account string) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingNonceByAccount", account)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetPendingNonceByAccount indicates an expected call of GetPendingNonceByAccount.
func (mr *MockExternalMockRecorder) GetPendingNonceByAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingNonceByAccount", reflect.TypeOf((*MockExternal)(nil).GetPendingNonceByAccount), account)
}

// GetPendingTxByHash mocks base method.
func (m *MockExternal) GetPendingTxByHash(hash string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingTxByHash", hash)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetPendingTxByHash indicates an expected call of GetPendingTxByHash.
func (mr *MockExternalMockRecorder) GetPendingTxByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingTxByHash", reflect.TypeOf((*MockExternal)(nil).GetPendingTxByHash), hash)
}

// RemoveTimeoutRequests mocks base method.
func (m *MockExternal) RemoveTimeoutRequests() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTimeoutRequests")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTimeoutRequests indicates an expected call of RemoveTimeoutRequests.
func (mr *MockExternalMockRecorder) RemoveTimeoutRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTimeoutRequests", reflect.TypeOf((*MockExternal)(nil).RemoveTimeoutRequests))
}
