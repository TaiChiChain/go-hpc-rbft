// Code generated by MockGen. DO NOT EDIT.
// Source: ./node.go

// Package rbft is a generated GoMock package.
package rbft

import (
	context "context"
	reflect "reflect"

	consensus "github.com/axiomesh/axiom-bft/common/consensus"
	types "github.com/axiomesh/axiom-bft/types"
	gomock "github.com/golang/mock/gomock"
)

// MockNode is a mock of Node interface.
type MockNode[T any, Constraint consensus.TXConstraint[T]] struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder[T, Constraint]
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder[T any, Constraint consensus.TXConstraint[T]] struct {
	mock *MockNode[T, Constraint]
}

// NewMockNode creates a new mock instance.
func NewMockNode[T any, Constraint consensus.TXConstraint[T]](ctrl *gomock.Controller) *MockNode[T, Constraint] {
	mock := &MockNode[T, Constraint]{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder[T, Constraint]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode[T, Constraint]) EXPECT() *MockNodeMockRecorder[T, Constraint] {
	return m.recorder
}

// GetPendingNonceByAccount mocks base method.
func (m *MockNode[T, Constraint]) GetPendingNonceByAccount(account string) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingNonceByAccount", account)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetPendingNonceByAccount indicates an expected call of GetPendingNonceByAccount.
func (mr *MockNodeMockRecorder[T, Constraint]) GetPendingNonceByAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingNonceByAccount", reflect.TypeOf((*MockNode[T, Constraint])(nil).GetPendingNonceByAccount), account)
}

// GetPendingTxByHash mocks base method.
func (m *MockNode[T, Constraint]) GetPendingTxByHash(hash string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingTxByHash", hash)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetPendingTxByHash indicates an expected call of GetPendingTxByHash.
func (mr *MockNodeMockRecorder[T, Constraint]) GetPendingTxByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingTxByHash", reflect.TypeOf((*MockNode[T, Constraint])(nil).GetPendingTxByHash), hash)
}

// GetUncommittedTransactions mocks base method.
func (m *MockNode[T, Constraint]) GetUncommittedTransactions(maxsize uint64) [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUncommittedTransactions", maxsize)
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetUncommittedTransactions indicates an expected call of GetUncommittedTransactions.
func (mr *MockNodeMockRecorder[T, Constraint]) GetUncommittedTransactions(maxsize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncommittedTransactions", reflect.TypeOf((*MockNode[T, Constraint])(nil).GetUncommittedTransactions), maxsize)
}

// Init mocks base method.
func (m *MockNode[T, Constraint]) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockNodeMockRecorder[T, Constraint]) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockNode[T, Constraint])(nil).Init))
}

// Propose mocks base method.
func (m *MockNode[T, Constraint]) Propose(requests *consensus.RequestSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Propose", requests)
	ret0, _ := ret[0].(error)
	return ret0
}

// Propose indicates an expected call of Propose.
func (mr *MockNodeMockRecorder[T, Constraint]) Propose(requests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Propose", reflect.TypeOf((*MockNode[T, Constraint])(nil).Propose), requests)
}

// ReportExecuted mocks base method.
func (m *MockNode[T, Constraint]) ReportExecuted(state *types.ServiceState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportExecuted", state)
}

// ReportExecuted indicates an expected call of ReportExecuted.
func (mr *MockNodeMockRecorder[T, Constraint]) ReportExecuted(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportExecuted", reflect.TypeOf((*MockNode[T, Constraint])(nil).ReportExecuted), state)
}

// ReportStateUpdated mocks base method.
func (m *MockNode[T, Constraint]) ReportStateUpdated(state *types.ServiceState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportStateUpdated", state)
}

// ReportStateUpdated indicates an expected call of ReportStateUpdated.
func (mr *MockNodeMockRecorder[T, Constraint]) ReportStateUpdated(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportStateUpdated", reflect.TypeOf((*MockNode[T, Constraint])(nil).ReportStateUpdated), state)
}

// Start mocks base method.
func (m *MockNode[T, Constraint]) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockNodeMockRecorder[T, Constraint]) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNode[T, Constraint])(nil).Start))
}

// Status mocks base method.
func (m *MockNode[T, Constraint]) Status() NodeStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(NodeStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockNodeMockRecorder[T, Constraint]) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockNode[T, Constraint])(nil).Status))
}

// Step mocks base method.
func (m *MockNode[T, Constraint]) Step(ctx context.Context, msg *consensus.ConsensusMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Step", ctx, msg)
}

// Step indicates an expected call of Step.
func (mr *MockNodeMockRecorder[T, Constraint]) Step(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Step", reflect.TypeOf((*MockNode[T, Constraint])(nil).Step), ctx, msg)
}

// Stop mocks base method.
func (m *MockNode[T, Constraint]) Stop() [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockNodeMockRecorder[T, Constraint]) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNode[T, Constraint])(nil).Stop))
}

// MockExternal is a mock of External interface.
type MockExternal struct {
	ctrl     *gomock.Controller
	recorder *MockExternalMockRecorder
}

// MockExternalMockRecorder is the mock recorder for MockExternal.
type MockExternalMockRecorder struct {
	mock *MockExternal
}

// NewMockExternal creates a new mock instance.
func NewMockExternal(ctrl *gomock.Controller) *MockExternal {
	mock := &MockExternal{ctrl: ctrl}
	mock.recorder = &MockExternalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternal) EXPECT() *MockExternalMockRecorder {
	return m.recorder
}

// GetPendingNonceByAccount mocks base method.
func (m *MockExternal) GetPendingNonceByAccount(account string) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingNonceByAccount", account)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetPendingNonceByAccount indicates an expected call of GetPendingNonceByAccount.
func (mr *MockExternalMockRecorder) GetPendingNonceByAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingNonceByAccount", reflect.TypeOf((*MockExternal)(nil).GetPendingNonceByAccount), account)
}

// GetPendingTxByHash mocks base method.
func (m *MockExternal) GetPendingTxByHash(hash string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingTxByHash", hash)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetPendingTxByHash indicates an expected call of GetPendingTxByHash.
func (mr *MockExternalMockRecorder) GetPendingTxByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingTxByHash", reflect.TypeOf((*MockExternal)(nil).GetPendingTxByHash), hash)
}

// MockServiceInbound is a mock of ServiceInbound interface.
type MockServiceInbound struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInboundMockRecorder
}

// MockServiceInboundMockRecorder is the mock recorder for MockServiceInbound.
type MockServiceInboundMockRecorder struct {
	mock *MockServiceInbound
}

// NewMockServiceInbound creates a new mock instance.
func NewMockServiceInbound(ctrl *gomock.Controller) *MockServiceInbound {
	mock := &MockServiceInbound{ctrl: ctrl}
	mock.recorder = &MockServiceInboundMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInbound) EXPECT() *MockServiceInboundMockRecorder {
	return m.recorder
}

// ReportExecuted mocks base method.
func (m *MockServiceInbound) ReportExecuted(state *types.ServiceState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportExecuted", state)
}

// ReportExecuted indicates an expected call of ReportExecuted.
func (mr *MockServiceInboundMockRecorder) ReportExecuted(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportExecuted", reflect.TypeOf((*MockServiceInbound)(nil).ReportExecuted), state)
}

// ReportStateUpdated mocks base method.
func (m *MockServiceInbound) ReportStateUpdated(state *types.ServiceState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportStateUpdated", state)
}

// ReportStateUpdated indicates an expected call of ReportStateUpdated.
func (mr *MockServiceInboundMockRecorder) ReportStateUpdated(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportStateUpdated", reflect.TypeOf((*MockServiceInbound)(nil).ReportStateUpdated), state)
}
