// Code generated by MockGen. DO NOT EDIT.
// Source: external/external.go

// Package mockexternal is a generated GoMock package.
package mockexternal

import (
	gomock "github.com/golang/mock/gomock"
	protos "github.com/ultramesh/flato-common/types/protos"
	rbftpb "github.com/ultramesh/flato-rbft/rbftpb"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// StoreState mocks base method
func (m *MockStorage) StoreState(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreState", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreState indicates an expected call of StoreState
func (mr *MockStorageMockRecorder) StoreState(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreState", reflect.TypeOf((*MockStorage)(nil).StoreState), key, value)
}

// DelState mocks base method
func (m *MockStorage) DelState(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelState", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelState indicates an expected call of DelState
func (mr *MockStorageMockRecorder) DelState(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelState", reflect.TypeOf((*MockStorage)(nil).DelState), key)
}

// ReadState mocks base method
func (m *MockStorage) ReadState(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadState", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadState indicates an expected call of ReadState
func (mr *MockStorageMockRecorder) ReadState(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadState", reflect.TypeOf((*MockStorage)(nil).ReadState), key)
}

// ReadStateSet mocks base method
func (m *MockStorage) ReadStateSet(key string) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStateSet", key)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStateSet indicates an expected call of ReadStateSet
func (mr *MockStorageMockRecorder) ReadStateSet(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStateSet", reflect.TypeOf((*MockStorage)(nil).ReadStateSet), key)
}

// Destroy mocks base method
func (m *MockStorage) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy
func (mr *MockStorageMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockStorage)(nil).Destroy))
}

// MockNetwork is a mock of Network interface
type MockNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkMockRecorder
}

// MockNetworkMockRecorder is the mock recorder for MockNetwork
type MockNetworkMockRecorder struct {
	mock *MockNetwork
}

// NewMockNetwork creates a new mock instance
func NewMockNetwork(ctrl *gomock.Controller) *MockNetwork {
	mock := &MockNetwork{ctrl: ctrl}
	mock.recorder = &MockNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetwork) EXPECT() *MockNetworkMockRecorder {
	return m.recorder
}

// Broadcast mocks base method
func (m *MockNetwork) Broadcast(msg *rbftpb.ConsensusMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast
func (mr *MockNetworkMockRecorder) Broadcast(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockNetwork)(nil).Broadcast), msg)
}

// Unicast mocks base method
func (m *MockNetwork) Unicast(msg *rbftpb.ConsensusMessage, to uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unicast", msg, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unicast indicates an expected call of Unicast
func (mr *MockNetworkMockRecorder) Unicast(msg, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unicast", reflect.TypeOf((*MockNetwork)(nil).Unicast), msg, to)
}

// UnicastByHash mocks base method
func (m *MockNetwork) UnicastByHash(msg *rbftpb.ConsensusMessage, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnicastByHash", msg, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnicastByHash indicates an expected call of UnicastByHash
func (mr *MockNetworkMockRecorder) UnicastByHash(msg, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnicastByHash", reflect.TypeOf((*MockNetwork)(nil).UnicastByHash), msg, to)
}

// UpdateTable mocks base method
func (m *MockNetwork) UpdateTable(change *rbftpb.ConfChange) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateTable", change)
}

// UpdateTable indicates an expected call of UpdateTable
func (mr *MockNetworkMockRecorder) UpdateTable(change interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTable", reflect.TypeOf((*MockNetwork)(nil).UpdateTable), change)
}

// MockCrypto is a mock of Crypto interface
type MockCrypto struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoMockRecorder
}

// MockCryptoMockRecorder is the mock recorder for MockCrypto
type MockCryptoMockRecorder struct {
	mock *MockCrypto
}

// NewMockCrypto creates a new mock instance
func NewMockCrypto(ctrl *gomock.Controller) *MockCrypto {
	mock := &MockCrypto{ctrl: ctrl}
	mock.recorder = &MockCryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCrypto) EXPECT() *MockCryptoMockRecorder {
	return m.recorder
}

// Sign mocks base method
func (m *MockCrypto) Sign(msg []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockCryptoMockRecorder) Sign(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockCrypto)(nil).Sign), msg)
}

// Verify mocks base method
func (m *MockCrypto) Verify(peerID uint64, signature, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", peerID, signature, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockCryptoMockRecorder) Verify(peerID, signature, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockCrypto)(nil).Verify), peerID, signature, msg)
}

// MockServiceOutbound is a mock of ServiceOutbound interface
type MockServiceOutbound struct {
	ctrl     *gomock.Controller
	recorder *MockServiceOutboundMockRecorder
}

// MockServiceOutboundMockRecorder is the mock recorder for MockServiceOutbound
type MockServiceOutboundMockRecorder struct {
	mock *MockServiceOutbound
}

// NewMockServiceOutbound creates a new mock instance
func NewMockServiceOutbound(ctrl *gomock.Controller) *MockServiceOutbound {
	mock := &MockServiceOutbound{ctrl: ctrl}
	mock.recorder = &MockServiceOutboundMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceOutbound) EXPECT() *MockServiceOutboundMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockServiceOutbound) Execute(txs []*protos.Transaction, localList []bool, seqNo uint64, timestamp int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", txs, localList, seqNo, timestamp)
}

// Execute indicates an expected call of Execute
func (mr *MockServiceOutboundMockRecorder) Execute(txs, localList, seqNo, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockServiceOutbound)(nil).Execute), txs, localList, seqNo, timestamp)
}

// StateUpdate mocks base method
func (m *MockServiceOutbound) StateUpdate(seqNo uint64, digest string, peers []uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StateUpdate", seqNo, digest, peers)
}

// StateUpdate indicates an expected call of StateUpdate
func (mr *MockServiceOutboundMockRecorder) StateUpdate(seqNo, digest, peers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateUpdate", reflect.TypeOf((*MockServiceOutbound)(nil).StateUpdate), seqNo, digest, peers)
}

// SendFilterEvent mocks base method
func (m *MockServiceOutbound) SendFilterEvent(informType rbftpb.InformType, message ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{informType}
	for _, a := range message {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SendFilterEvent", varargs...)
}

// SendFilterEvent indicates an expected call of SendFilterEvent
func (mr *MockServiceOutboundMockRecorder) SendFilterEvent(informType interface{}, message ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{informType}, message...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFilterEvent", reflect.TypeOf((*MockServiceOutbound)(nil).SendFilterEvent), varargs...)
}

// MockExternalStack is a mock of ExternalStack interface
type MockExternalStack struct {
	ctrl     *gomock.Controller
	recorder *MockExternalStackMockRecorder
}

// MockExternalStackMockRecorder is the mock recorder for MockExternalStack
type MockExternalStackMockRecorder struct {
	mock *MockExternalStack
}

// NewMockExternalStack creates a new mock instance
func NewMockExternalStack(ctrl *gomock.Controller) *MockExternalStack {
	mock := &MockExternalStack{ctrl: ctrl}
	mock.recorder = &MockExternalStackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExternalStack) EXPECT() *MockExternalStackMockRecorder {
	return m.recorder
}

// StoreState mocks base method
func (m *MockExternalStack) StoreState(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreState", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreState indicates an expected call of StoreState
func (mr *MockExternalStackMockRecorder) StoreState(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreState", reflect.TypeOf((*MockExternalStack)(nil).StoreState), key, value)
}

// DelState mocks base method
func (m *MockExternalStack) DelState(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelState", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelState indicates an expected call of DelState
func (mr *MockExternalStackMockRecorder) DelState(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelState", reflect.TypeOf((*MockExternalStack)(nil).DelState), key)
}

// ReadState mocks base method
func (m *MockExternalStack) ReadState(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadState", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadState indicates an expected call of ReadState
func (mr *MockExternalStackMockRecorder) ReadState(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadState", reflect.TypeOf((*MockExternalStack)(nil).ReadState), key)
}

// ReadStateSet mocks base method
func (m *MockExternalStack) ReadStateSet(key string) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStateSet", key)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStateSet indicates an expected call of ReadStateSet
func (mr *MockExternalStackMockRecorder) ReadStateSet(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStateSet", reflect.TypeOf((*MockExternalStack)(nil).ReadStateSet), key)
}

// Destroy mocks base method
func (m *MockExternalStack) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy
func (mr *MockExternalStackMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockExternalStack)(nil).Destroy))
}

// Broadcast mocks base method
func (m *MockExternalStack) Broadcast(msg *rbftpb.ConsensusMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast
func (mr *MockExternalStackMockRecorder) Broadcast(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockExternalStack)(nil).Broadcast), msg)
}

// Unicast mocks base method
func (m *MockExternalStack) Unicast(msg *rbftpb.ConsensusMessage, to uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unicast", msg, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unicast indicates an expected call of Unicast
func (mr *MockExternalStackMockRecorder) Unicast(msg, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unicast", reflect.TypeOf((*MockExternalStack)(nil).Unicast), msg, to)
}

// UnicastByHash mocks base method
func (m *MockExternalStack) UnicastByHash(msg *rbftpb.ConsensusMessage, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnicastByHash", msg, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnicastByHash indicates an expected call of UnicastByHash
func (mr *MockExternalStackMockRecorder) UnicastByHash(msg, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnicastByHash", reflect.TypeOf((*MockExternalStack)(nil).UnicastByHash), msg, to)
}

// UpdateTable mocks base method
func (m *MockExternalStack) UpdateTable(change *rbftpb.ConfChange) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateTable", change)
}

// UpdateTable indicates an expected call of UpdateTable
func (mr *MockExternalStackMockRecorder) UpdateTable(change interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTable", reflect.TypeOf((*MockExternalStack)(nil).UpdateTable), change)
}

// Sign mocks base method
func (m *MockExternalStack) Sign(msg []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", msg)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockExternalStackMockRecorder) Sign(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockExternalStack)(nil).Sign), msg)
}

// Verify mocks base method
func (m *MockExternalStack) Verify(peerID uint64, signature, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", peerID, signature, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockExternalStackMockRecorder) Verify(peerID, signature, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockExternalStack)(nil).Verify), peerID, signature, msg)
}

// Execute mocks base method
func (m *MockExternalStack) Execute(txs []*protos.Transaction, localList []bool, seqNo uint64, timestamp int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", txs, localList, seqNo, timestamp)
}

// Execute indicates an expected call of Execute
func (mr *MockExternalStackMockRecorder) Execute(txs, localList, seqNo, timestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockExternalStack)(nil).Execute), txs, localList, seqNo, timestamp)
}

// StateUpdate mocks base method
func (m *MockExternalStack) StateUpdate(seqNo uint64, digest string, peers []uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StateUpdate", seqNo, digest, peers)
}

// StateUpdate indicates an expected call of StateUpdate
func (mr *MockExternalStackMockRecorder) StateUpdate(seqNo, digest, peers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateUpdate", reflect.TypeOf((*MockExternalStack)(nil).StateUpdate), seqNo, digest, peers)
}

// SendFilterEvent mocks base method
func (m *MockExternalStack) SendFilterEvent(informType rbftpb.InformType, message ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{informType}
	for _, a := range message {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SendFilterEvent", varargs...)
}

// SendFilterEvent indicates an expected call of SendFilterEvent
func (mr *MockExternalStackMockRecorder) SendFilterEvent(informType interface{}, message ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{informType}, message...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFilterEvent", reflect.TypeOf((*MockExternalStack)(nil).SendFilterEvent), varargs...)
}
