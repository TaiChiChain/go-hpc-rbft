// Code generated by MockGen. DO NOT EDIT.
// Source: common.go

// Package common is a generated GoMock package.
package common

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockencoder is a mock of encoder interface
type Mockencoder struct {
	ctrl     *gomock.Controller
	recorder *MockencoderMockRecorder
}

// MockencoderMockRecorder is the mock recorder for Mockencoder
type MockencoderMockRecorder struct {
	mock *Mockencoder
}

// NewMockencoder creates a new mock instance
func NewMockencoder(ctrl *gomock.Controller) *Mockencoder {
	mock := &Mockencoder{ctrl: ctrl}
	mock.recorder = &MockencoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockencoder) EXPECT() *MockencoderMockRecorder {
	return m.recorder
}

// toHex mocks base method
func (m *Mockencoder) toHex(b []byte) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "toHex", b)
	ret0, _ := ret[0].(string)
	return ret0
}

// toHex indicates an expected call of toHex
func (mr *MockencoderMockRecorder) toHex(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "toHex", reflect.TypeOf((*Mockencoder)(nil).toHex), b)
}
