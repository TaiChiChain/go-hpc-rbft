// Code generated by MockGen. DO NOT EDIT.
// Source: ./txpool.go
//
// Generated by this command:
//
//	mockgen -destination ./mock_txpool.go -package txpool -source ./txpool.go -typed
//
// Package txpool is a generated GoMock package.
package txpool

import (
	reflect "reflect"

	consensus "github.com/axiomesh/axiom-bft/common/consensus"
	gomock "go.uber.org/mock/gomock"
)

// MockTxPool is a mock of TxPool interface.
type MockTxPool[T any, Constraint consensus.TXConstraint[T]] struct {
	ctrl     *gomock.Controller
	recorder *MockTxPoolMockRecorder[T, Constraint]
}

// MockTxPoolMockRecorder is the mock recorder for MockTxPool.
type MockTxPoolMockRecorder[T any, Constraint consensus.TXConstraint[T]] struct {
	mock *MockTxPool[T, Constraint]
}

// NewMockTxPool creates a new mock instance.
func NewMockTxPool[T any, Constraint consensus.TXConstraint[T]](ctrl *gomock.Controller) *MockTxPool[T, Constraint] {
	mock := &MockTxPool[T, Constraint]{ctrl: ctrl}
	mock.recorder = &MockTxPoolMockRecorder[T, Constraint]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxPool[T, Constraint]) EXPECT() *MockTxPoolMockRecorder[T, Constraint] {
	return m.recorder
}

// AddNewRequests mocks base method.
func (m *MockTxPool[T, Constraint]) AddNewRequests(txs []*T, isPrimary, local, isReplace, needGenerateBatch bool) ([]*RequestHashBatch[T, Constraint], []string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewRequests", txs, isPrimary, local, isReplace, needGenerateBatch)
	ret0, _ := ret[0].([]*RequestHashBatch[T, Constraint])
	ret1, _ := ret[1].([]string)
	return ret0, ret1
}

// AddNewRequests indicates an expected call of AddNewRequests.
func (mr *MockTxPoolMockRecorder[T, Constraint]) AddNewRequests(txs, isPrimary, local, isReplace, needGenerateBatch any) *TxPoolAddNewRequestsCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewRequests", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).AddNewRequests), txs, isPrimary, local, isReplace, needGenerateBatch)
	return &TxPoolAddNewRequestsCall[T, Constraint]{Call: call}
}

// TxPoolAddNewRequestsCall wrap *gomock.Call
type TxPoolAddNewRequestsCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolAddNewRequestsCall[T, Constraint]) Return(arg0 []*RequestHashBatch[T, Constraint], arg1 []string) *TxPoolAddNewRequestsCall[T, Constraint] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolAddNewRequestsCall[T, Constraint]) Do(f func([]*T, bool, bool, bool, bool) ([]*RequestHashBatch[T, Constraint], []string)) *TxPoolAddNewRequestsCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolAddNewRequestsCall[T, Constraint]) DoAndReturn(f func([]*T, bool, bool, bool, bool) ([]*RequestHashBatch[T, Constraint], []string)) *TxPoolAddNewRequestsCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FilterOutOfDateRequests mocks base method.
func (m *MockTxPool[T, Constraint]) FilterOutOfDateRequests() ([]*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterOutOfDateRequests")
	ret0, _ := ret[0].([]*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOutOfDateRequests indicates an expected call of FilterOutOfDateRequests.
func (mr *MockTxPoolMockRecorder[T, Constraint]) FilterOutOfDateRequests() *TxPoolFilterOutOfDateRequestsCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOutOfDateRequests", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).FilterOutOfDateRequests))
	return &TxPoolFilterOutOfDateRequestsCall[T, Constraint]{Call: call}
}

// TxPoolFilterOutOfDateRequestsCall wrap *gomock.Call
type TxPoolFilterOutOfDateRequestsCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolFilterOutOfDateRequestsCall[T, Constraint]) Return(arg0 []*T, arg1 error) *TxPoolFilterOutOfDateRequestsCall[T, Constraint] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolFilterOutOfDateRequestsCall[T, Constraint]) Do(f func() ([]*T, error)) *TxPoolFilterOutOfDateRequestsCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolFilterOutOfDateRequestsCall[T, Constraint]) DoAndReturn(f func() ([]*T, error)) *TxPoolFilterOutOfDateRequestsCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GenerateRequestBatch mocks base method.
func (m *MockTxPool[T, Constraint]) GenerateRequestBatch() []*RequestHashBatch[T, Constraint] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRequestBatch")
	ret0, _ := ret[0].([]*RequestHashBatch[T, Constraint])
	return ret0
}

// GenerateRequestBatch indicates an expected call of GenerateRequestBatch.
func (mr *MockTxPoolMockRecorder[T, Constraint]) GenerateRequestBatch() *TxPoolGenerateRequestBatchCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRequestBatch", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).GenerateRequestBatch))
	return &TxPoolGenerateRequestBatchCall[T, Constraint]{Call: call}
}

// TxPoolGenerateRequestBatchCall wrap *gomock.Call
type TxPoolGenerateRequestBatchCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolGenerateRequestBatchCall[T, Constraint]) Return(arg0 []*RequestHashBatch[T, Constraint]) *TxPoolGenerateRequestBatchCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolGenerateRequestBatchCall[T, Constraint]) Do(f func() []*RequestHashBatch[T, Constraint]) *TxPoolGenerateRequestBatchCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolGenerateRequestBatchCall[T, Constraint]) DoAndReturn(f func() []*RequestHashBatch[T, Constraint]) *TxPoolGenerateRequestBatchCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPendingTxByHash mocks base method.
func (m *MockTxPool[T, Constraint]) GetPendingTxByHash(hash string) *T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingTxByHash", hash)
	ret0, _ := ret[0].(*T)
	return ret0
}

// GetPendingTxByHash indicates an expected call of GetPendingTxByHash.
func (mr *MockTxPoolMockRecorder[T, Constraint]) GetPendingTxByHash(hash any) *TxPoolGetPendingTxByHashCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingTxByHash", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).GetPendingTxByHash), hash)
	return &TxPoolGetPendingTxByHashCall[T, Constraint]{Call: call}
}

// TxPoolGetPendingTxByHashCall wrap *gomock.Call
type TxPoolGetPendingTxByHashCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolGetPendingTxByHashCall[T, Constraint]) Return(arg0 *T) *TxPoolGetPendingTxByHashCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolGetPendingTxByHashCall[T, Constraint]) Do(f func(string) *T) *TxPoolGetPendingTxByHashCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolGetPendingTxByHashCall[T, Constraint]) DoAndReturn(f func(string) *T) *TxPoolGetPendingTxByHashCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPendingTxCountByAccount mocks base method.
func (m *MockTxPool[T, Constraint]) GetPendingTxCountByAccount(account string) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingTxCountByAccount", account)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetPendingTxCountByAccount indicates an expected call of GetPendingTxCountByAccount.
func (mr *MockTxPoolMockRecorder[T, Constraint]) GetPendingTxCountByAccount(account any) *TxPoolGetPendingTxCountByAccountCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingTxCountByAccount", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).GetPendingTxCountByAccount), account)
	return &TxPoolGetPendingTxCountByAccountCall[T, Constraint]{Call: call}
}

// TxPoolGetPendingTxCountByAccountCall wrap *gomock.Call
type TxPoolGetPendingTxCountByAccountCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolGetPendingTxCountByAccountCall[T, Constraint]) Return(arg0 uint64) *TxPoolGetPendingTxCountByAccountCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolGetPendingTxCountByAccountCall[T, Constraint]) Do(f func(string) uint64) *TxPoolGetPendingTxCountByAccountCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolGetPendingTxCountByAccountCall[T, Constraint]) DoAndReturn(f func(string) uint64) *TxPoolGetPendingTxCountByAccountCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRequestsByHashList mocks base method.
func (m *MockTxPool[T, Constraint]) GetRequestsByHashList(batchHash string, timestamp int64, hashList, deDuplicateTxHashes []string) ([]*T, []bool, map[uint64]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsByHashList", batchHash, timestamp, hashList, deDuplicateTxHashes)
	ret0, _ := ret[0].([]*T)
	ret1, _ := ret[1].([]bool)
	ret2, _ := ret[2].(map[uint64]string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetRequestsByHashList indicates an expected call of GetRequestsByHashList.
func (mr *MockTxPoolMockRecorder[T, Constraint]) GetRequestsByHashList(batchHash, timestamp, hashList, deDuplicateTxHashes any) *TxPoolGetRequestsByHashListCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsByHashList", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).GetRequestsByHashList), batchHash, timestamp, hashList, deDuplicateTxHashes)
	return &TxPoolGetRequestsByHashListCall[T, Constraint]{Call: call}
}

// TxPoolGetRequestsByHashListCall wrap *gomock.Call
type TxPoolGetRequestsByHashListCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolGetRequestsByHashListCall[T, Constraint]) Return(txs []*T, list []bool, missingTxsHash map[uint64]string, err error) *TxPoolGetRequestsByHashListCall[T, Constraint] {
	c.Call = c.Call.Return(txs, list, missingTxsHash, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolGetRequestsByHashListCall[T, Constraint]) Do(f func(string, int64, []string, []string) ([]*T, []bool, map[uint64]string, error)) *TxPoolGetRequestsByHashListCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolGetRequestsByHashListCall[T, Constraint]) DoAndReturn(f func(string, int64, []string, []string) ([]*T, []bool, map[uint64]string, error)) *TxPoolGetRequestsByHashListCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTotalPendingTxCount mocks base method.
func (m *MockTxPool[T, Constraint]) GetTotalPendingTxCount() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPendingTxCount")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetTotalPendingTxCount indicates an expected call of GetTotalPendingTxCount.
func (mr *MockTxPoolMockRecorder[T, Constraint]) GetTotalPendingTxCount() *TxPoolGetTotalPendingTxCountCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPendingTxCount", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).GetTotalPendingTxCount))
	return &TxPoolGetTotalPendingTxCountCall[T, Constraint]{Call: call}
}

// TxPoolGetTotalPendingTxCountCall wrap *gomock.Call
type TxPoolGetTotalPendingTxCountCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolGetTotalPendingTxCountCall[T, Constraint]) Return(arg0 uint64) *TxPoolGetTotalPendingTxCountCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolGetTotalPendingTxCountCall[T, Constraint]) Do(f func() uint64) *TxPoolGetTotalPendingTxCountCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolGetTotalPendingTxCountCall[T, Constraint]) DoAndReturn(f func() uint64) *TxPoolGetTotalPendingTxCountCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUncommittedTransactions mocks base method.
func (m *MockTxPool[T, Constraint]) GetUncommittedTransactions(maxsize uint64) []*T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUncommittedTransactions", maxsize)
	ret0, _ := ret[0].([]*T)
	return ret0
}

// GetUncommittedTransactions indicates an expected call of GetUncommittedTransactions.
func (mr *MockTxPoolMockRecorder[T, Constraint]) GetUncommittedTransactions(maxsize any) *TxPoolGetUncommittedTransactionsCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncommittedTransactions", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).GetUncommittedTransactions), maxsize)
	return &TxPoolGetUncommittedTransactionsCall[T, Constraint]{Call: call}
}

// TxPoolGetUncommittedTransactionsCall wrap *gomock.Call
type TxPoolGetUncommittedTransactionsCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolGetUncommittedTransactionsCall[T, Constraint]) Return(arg0 []*T) *TxPoolGetUncommittedTransactionsCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolGetUncommittedTransactionsCall[T, Constraint]) Do(f func(uint64) []*T) *TxPoolGetUncommittedTransactionsCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolGetUncommittedTransactionsCall[T, Constraint]) DoAndReturn(f func(uint64) []*T) *TxPoolGetUncommittedTransactionsCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasPendingRequestInPool mocks base method.
func (m *MockTxPool[T, Constraint]) HasPendingRequestInPool() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPendingRequestInPool")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasPendingRequestInPool indicates an expected call of HasPendingRequestInPool.
func (mr *MockTxPoolMockRecorder[T, Constraint]) HasPendingRequestInPool() *TxPoolHasPendingRequestInPoolCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPendingRequestInPool", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).HasPendingRequestInPool))
	return &TxPoolHasPendingRequestInPoolCall[T, Constraint]{Call: call}
}

// TxPoolHasPendingRequestInPoolCall wrap *gomock.Call
type TxPoolHasPendingRequestInPoolCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolHasPendingRequestInPoolCall[T, Constraint]) Return(arg0 bool) *TxPoolHasPendingRequestInPoolCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolHasPendingRequestInPoolCall[T, Constraint]) Do(f func() bool) *TxPoolHasPendingRequestInPoolCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolHasPendingRequestInPoolCall[T, Constraint]) DoAndReturn(f func() bool) *TxPoolHasPendingRequestInPoolCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Init mocks base method.
func (m *MockTxPool[T, Constraint]) Init(selfID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", selfID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockTxPoolMockRecorder[T, Constraint]) Init(selfID any) *TxPoolInitCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).Init), selfID)
	return &TxPoolInitCall[T, Constraint]{Call: call}
}

// TxPoolInitCall wrap *gomock.Call
type TxPoolInitCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolInitCall[T, Constraint]) Return(arg0 error) *TxPoolInitCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolInitCall[T, Constraint]) Do(f func(uint64) error) *TxPoolInitCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolInitCall[T, Constraint]) DoAndReturn(f func(uint64) error) *TxPoolInitCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsPoolFull mocks base method.
func (m *MockTxPool[T, Constraint]) IsPoolFull() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPoolFull")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPoolFull indicates an expected call of IsPoolFull.
func (mr *MockTxPoolMockRecorder[T, Constraint]) IsPoolFull() *TxPoolIsPoolFullCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPoolFull", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).IsPoolFull))
	return &TxPoolIsPoolFullCall[T, Constraint]{Call: call}
}

// TxPoolIsPoolFullCall wrap *gomock.Call
type TxPoolIsPoolFullCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolIsPoolFullCall[T, Constraint]) Return(arg0 bool) *TxPoolIsPoolFullCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolIsPoolFullCall[T, Constraint]) Do(f func() bool) *TxPoolIsPoolFullCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolIsPoolFullCall[T, Constraint]) DoAndReturn(f func() bool) *TxPoolIsPoolFullCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReConstructBatchByOrder mocks base method.
func (m *MockTxPool[T, Constraint]) ReConstructBatchByOrder(oldBatch *RequestHashBatch[T, Constraint]) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReConstructBatchByOrder", oldBatch)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReConstructBatchByOrder indicates an expected call of ReConstructBatchByOrder.
func (mr *MockTxPoolMockRecorder[T, Constraint]) ReConstructBatchByOrder(oldBatch any) *TxPoolReConstructBatchByOrderCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReConstructBatchByOrder", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).ReConstructBatchByOrder), oldBatch)
	return &TxPoolReConstructBatchByOrderCall[T, Constraint]{Call: call}
}

// TxPoolReConstructBatchByOrderCall wrap *gomock.Call
type TxPoolReConstructBatchByOrderCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolReConstructBatchByOrderCall[T, Constraint]) Return(deDuplicateTxHashes []string, err error) *TxPoolReConstructBatchByOrderCall[T, Constraint] {
	c.Call = c.Call.Return(deDuplicateTxHashes, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolReConstructBatchByOrderCall[T, Constraint]) Do(f func(*RequestHashBatch[T, Constraint]) ([]string, error)) *TxPoolReConstructBatchByOrderCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolReConstructBatchByOrderCall[T, Constraint]) DoAndReturn(f func(*RequestHashBatch[T, Constraint]) ([]string, error)) *TxPoolReConstructBatchByOrderCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReceiveMissingRequests mocks base method.
func (m *MockTxPool[T, Constraint]) ReceiveMissingRequests(batchHash string, txs map[uint64]*T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveMissingRequests", batchHash, txs)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReceiveMissingRequests indicates an expected call of ReceiveMissingRequests.
func (mr *MockTxPoolMockRecorder[T, Constraint]) ReceiveMissingRequests(batchHash, txs any) *TxPoolReceiveMissingRequestsCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMissingRequests", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).ReceiveMissingRequests), batchHash, txs)
	return &TxPoolReceiveMissingRequestsCall[T, Constraint]{Call: call}
}

// TxPoolReceiveMissingRequestsCall wrap *gomock.Call
type TxPoolReceiveMissingRequestsCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolReceiveMissingRequestsCall[T, Constraint]) Return(arg0 error) *TxPoolReceiveMissingRequestsCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolReceiveMissingRequestsCall[T, Constraint]) Do(f func(string, map[uint64]*T) error) *TxPoolReceiveMissingRequestsCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolReceiveMissingRequestsCall[T, Constraint]) DoAndReturn(f func(string, map[uint64]*T) error) *TxPoolReceiveMissingRequestsCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveBatches mocks base method.
func (m *MockTxPool[T, Constraint]) RemoveBatches(hashList []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveBatches", hashList)
}

// RemoveBatches indicates an expected call of RemoveBatches.
func (mr *MockTxPoolMockRecorder[T, Constraint]) RemoveBatches(hashList any) *TxPoolRemoveBatchesCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBatches", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).RemoveBatches), hashList)
	return &TxPoolRemoveBatchesCall[T, Constraint]{Call: call}
}

// TxPoolRemoveBatchesCall wrap *gomock.Call
type TxPoolRemoveBatchesCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolRemoveBatchesCall[T, Constraint]) Return() *TxPoolRemoveBatchesCall[T, Constraint] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolRemoveBatchesCall[T, Constraint]) Do(f func([]string)) *TxPoolRemoveBatchesCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolRemoveBatchesCall[T, Constraint]) DoAndReturn(f func([]string)) *TxPoolRemoveBatchesCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveTimeoutRequests mocks base method.
func (m *MockTxPool[T, Constraint]) RemoveTimeoutRequests() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTimeoutRequests")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTimeoutRequests indicates an expected call of RemoveTimeoutRequests.
func (mr *MockTxPoolMockRecorder[T, Constraint]) RemoveTimeoutRequests() *TxPoolRemoveTimeoutRequestsCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTimeoutRequests", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).RemoveTimeoutRequests))
	return &TxPoolRemoveTimeoutRequestsCall[T, Constraint]{Call: call}
}

// TxPoolRemoveTimeoutRequestsCall wrap *gomock.Call
type TxPoolRemoveTimeoutRequestsCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolRemoveTimeoutRequestsCall[T, Constraint]) Return(arg0 uint64, arg1 error) *TxPoolRemoveTimeoutRequestsCall[T, Constraint] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolRemoveTimeoutRequestsCall[T, Constraint]) Do(f func() (uint64, error)) *TxPoolRemoveTimeoutRequestsCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolRemoveTimeoutRequestsCall[T, Constraint]) DoAndReturn(f func() (uint64, error)) *TxPoolRemoveTimeoutRequestsCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Reset mocks base method.
func (m *MockTxPool[T, Constraint]) Reset(saveBatches []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", saveBatches)
}

// Reset indicates an expected call of Reset.
func (mr *MockTxPoolMockRecorder[T, Constraint]) Reset(saveBatches any) *TxPoolResetCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).Reset), saveBatches)
	return &TxPoolResetCall[T, Constraint]{Call: call}
}

// TxPoolResetCall wrap *gomock.Call
type TxPoolResetCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolResetCall[T, Constraint]) Return() *TxPoolResetCall[T, Constraint] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolResetCall[T, Constraint]) Do(f func([]string)) *TxPoolResetCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolResetCall[T, Constraint]) DoAndReturn(f func([]string)) *TxPoolResetCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RestoreOneBatch mocks base method.
func (m *MockTxPool[T, Constraint]) RestoreOneBatch(hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreOneBatch", hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreOneBatch indicates an expected call of RestoreOneBatch.
func (mr *MockTxPoolMockRecorder[T, Constraint]) RestoreOneBatch(hash any) *TxPoolRestoreOneBatchCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreOneBatch", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).RestoreOneBatch), hash)
	return &TxPoolRestoreOneBatchCall[T, Constraint]{Call: call}
}

// TxPoolRestoreOneBatchCall wrap *gomock.Call
type TxPoolRestoreOneBatchCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolRestoreOneBatchCall[T, Constraint]) Return(arg0 error) *TxPoolRestoreOneBatchCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolRestoreOneBatchCall[T, Constraint]) Do(f func(string) error) *TxPoolRestoreOneBatchCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolRestoreOneBatchCall[T, Constraint]) DoAndReturn(f func(string) error) *TxPoolRestoreOneBatchCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RestorePool mocks base method.
func (m *MockTxPool[T, Constraint]) RestorePool() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RestorePool")
}

// RestorePool indicates an expected call of RestorePool.
func (mr *MockTxPoolMockRecorder[T, Constraint]) RestorePool() *TxPoolRestorePoolCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestorePool", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).RestorePool))
	return &TxPoolRestorePoolCall[T, Constraint]{Call: call}
}

// TxPoolRestorePoolCall wrap *gomock.Call
type TxPoolRestorePoolCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolRestorePoolCall[T, Constraint]) Return() *TxPoolRestorePoolCall[T, Constraint] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolRestorePoolCall[T, Constraint]) Do(f func()) *TxPoolRestorePoolCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolRestorePoolCall[T, Constraint]) DoAndReturn(f func()) *TxPoolRestorePoolCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendMissingRequests mocks base method.
func (m *MockTxPool[T, Constraint]) SendMissingRequests(batchHash string, missingHashList map[uint64]string) (map[uint64]*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMissingRequests", batchHash, missingHashList)
	ret0, _ := ret[0].(map[uint64]*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMissingRequests indicates an expected call of SendMissingRequests.
func (mr *MockTxPoolMockRecorder[T, Constraint]) SendMissingRequests(batchHash, missingHashList any) *TxPoolSendMissingRequestsCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMissingRequests", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).SendMissingRequests), batchHash, missingHashList)
	return &TxPoolSendMissingRequestsCall[T, Constraint]{Call: call}
}

// TxPoolSendMissingRequestsCall wrap *gomock.Call
type TxPoolSendMissingRequestsCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolSendMissingRequestsCall[T, Constraint]) Return(txs map[uint64]*T, err error) *TxPoolSendMissingRequestsCall[T, Constraint] {
	c.Call = c.Call.Return(txs, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolSendMissingRequestsCall[T, Constraint]) Do(f func(string, map[uint64]string) (map[uint64]*T, error)) *TxPoolSendMissingRequestsCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolSendMissingRequestsCall[T, Constraint]) DoAndReturn(f func(string, map[uint64]string) (map[uint64]*T, error)) *TxPoolSendMissingRequestsCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Start mocks base method.
func (m *MockTxPool[T, Constraint]) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockTxPoolMockRecorder[T, Constraint]) Start() *TxPoolStartCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).Start))
	return &TxPoolStartCall[T, Constraint]{Call: call}
}

// TxPoolStartCall wrap *gomock.Call
type TxPoolStartCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolStartCall[T, Constraint]) Return(arg0 error) *TxPoolStartCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolStartCall[T, Constraint]) Do(f func() error) *TxPoolStartCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolStartCall[T, Constraint]) DoAndReturn(f func() error) *TxPoolStartCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stop mocks base method.
func (m *MockTxPool[T, Constraint]) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTxPoolMockRecorder[T, Constraint]) Stop() *TxPoolStopCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTxPool[T, Constraint])(nil).Stop))
	return &TxPoolStopCall[T, Constraint]{Call: call}
}

// TxPoolStopCall wrap *gomock.Call
type TxPoolStopCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TxPoolStopCall[T, Constraint]) Return() *TxPoolStopCall[T, Constraint] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TxPoolStopCall[T, Constraint]) Do(f func()) *TxPoolStopCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TxPoolStopCall[T, Constraint]) DoAndReturn(f func()) *TxPoolStopCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockExternal is a mock of External interface.
type MockExternal[T any, Constraint consensus.TXConstraint[T]] struct {
	ctrl     *gomock.Controller
	recorder *MockExternalMockRecorder[T, Constraint]
}

// MockExternalMockRecorder is the mock recorder for MockExternal.
type MockExternalMockRecorder[T any, Constraint consensus.TXConstraint[T]] struct {
	mock *MockExternal[T, Constraint]
}

// NewMockExternal creates a new mock instance.
func NewMockExternal[T any, Constraint consensus.TXConstraint[T]](ctrl *gomock.Controller) *MockExternal[T, Constraint] {
	mock := &MockExternal[T, Constraint]{ctrl: ctrl}
	mock.recorder = &MockExternalMockRecorder[T, Constraint]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternal[T, Constraint]) EXPECT() *MockExternalMockRecorder[T, Constraint] {
	return m.recorder
}

// GetPendingTxByHash mocks base method.
func (m *MockExternal[T, Constraint]) GetPendingTxByHash(hash string) *T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingTxByHash", hash)
	ret0, _ := ret[0].(*T)
	return ret0
}

// GetPendingTxByHash indicates an expected call of GetPendingTxByHash.
func (mr *MockExternalMockRecorder[T, Constraint]) GetPendingTxByHash(hash any) *ExternalGetPendingTxByHashCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingTxByHash", reflect.TypeOf((*MockExternal[T, Constraint])(nil).GetPendingTxByHash), hash)
	return &ExternalGetPendingTxByHashCall[T, Constraint]{Call: call}
}

// ExternalGetPendingTxByHashCall wrap *gomock.Call
type ExternalGetPendingTxByHashCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExternalGetPendingTxByHashCall[T, Constraint]) Return(arg0 *T) *ExternalGetPendingTxByHashCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExternalGetPendingTxByHashCall[T, Constraint]) Do(f func(string) *T) *ExternalGetPendingTxByHashCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExternalGetPendingTxByHashCall[T, Constraint]) DoAndReturn(f func(string) *T) *ExternalGetPendingTxByHashCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPendingTxCountByAccount mocks base method.
func (m *MockExternal[T, Constraint]) GetPendingTxCountByAccount(account string) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingTxCountByAccount", account)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetPendingTxCountByAccount indicates an expected call of GetPendingTxCountByAccount.
func (mr *MockExternalMockRecorder[T, Constraint]) GetPendingTxCountByAccount(account any) *ExternalGetPendingTxCountByAccountCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingTxCountByAccount", reflect.TypeOf((*MockExternal[T, Constraint])(nil).GetPendingTxCountByAccount), account)
	return &ExternalGetPendingTxCountByAccountCall[T, Constraint]{Call: call}
}

// ExternalGetPendingTxCountByAccountCall wrap *gomock.Call
type ExternalGetPendingTxCountByAccountCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExternalGetPendingTxCountByAccountCall[T, Constraint]) Return(arg0 uint64) *ExternalGetPendingTxCountByAccountCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExternalGetPendingTxCountByAccountCall[T, Constraint]) Do(f func(string) uint64) *ExternalGetPendingTxCountByAccountCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExternalGetPendingTxCountByAccountCall[T, Constraint]) DoAndReturn(f func(string) uint64) *ExternalGetPendingTxCountByAccountCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTotalPendingTxCount mocks base method.
func (m *MockExternal[T, Constraint]) GetTotalPendingTxCount() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPendingTxCount")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetTotalPendingTxCount indicates an expected call of GetTotalPendingTxCount.
func (mr *MockExternalMockRecorder[T, Constraint]) GetTotalPendingTxCount() *ExternalGetTotalPendingTxCountCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPendingTxCount", reflect.TypeOf((*MockExternal[T, Constraint])(nil).GetTotalPendingTxCount))
	return &ExternalGetTotalPendingTxCountCall[T, Constraint]{Call: call}
}

// ExternalGetTotalPendingTxCountCall wrap *gomock.Call
type ExternalGetTotalPendingTxCountCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExternalGetTotalPendingTxCountCall[T, Constraint]) Return(arg0 uint64) *ExternalGetTotalPendingTxCountCall[T, Constraint] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExternalGetTotalPendingTxCountCall[T, Constraint]) Do(f func() uint64) *ExternalGetTotalPendingTxCountCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExternalGetTotalPendingTxCountCall[T, Constraint]) DoAndReturn(f func() uint64) *ExternalGetTotalPendingTxCountCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveTimeoutRequests mocks base method.
func (m *MockExternal[T, Constraint]) RemoveTimeoutRequests() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTimeoutRequests")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTimeoutRequests indicates an expected call of RemoveTimeoutRequests.
func (mr *MockExternalMockRecorder[T, Constraint]) RemoveTimeoutRequests() *ExternalRemoveTimeoutRequestsCall[T, Constraint] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTimeoutRequests", reflect.TypeOf((*MockExternal[T, Constraint])(nil).RemoveTimeoutRequests))
	return &ExternalRemoveTimeoutRequestsCall[T, Constraint]{Call: call}
}

// ExternalRemoveTimeoutRequestsCall wrap *gomock.Call
type ExternalRemoveTimeoutRequestsCall[T any, Constraint consensus.TXConstraint[T]] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExternalRemoveTimeoutRequestsCall[T, Constraint]) Return(arg0 uint64, arg1 error) *ExternalRemoveTimeoutRequestsCall[T, Constraint] {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExternalRemoveTimeoutRequestsCall[T, Constraint]) Do(f func() (uint64, error)) *ExternalRemoveTimeoutRequestsCall[T, Constraint] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExternalRemoveTimeoutRequestsCall[T, Constraint]) DoAndReturn(f func() (uint64, error)) *ExternalRemoveTimeoutRequestsCall[T, Constraint] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
